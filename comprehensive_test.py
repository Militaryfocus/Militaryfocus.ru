#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import tempfile
import unittest
from werkzeug.security import generate_password_hash

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_basic_functionality():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ Flask-Admin"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ['SECRET_KEY'] = 'test-secret-key'
        os.environ['DATABASE_URL'] = 'sqlite:///:memory:'
        os.environ['FLASK_DEBUG'] = 'False'
        
        # –ò–º–ø–æ—Ä—Ç –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        from blog.models import User, Post, Category, Comment, db
        from blog import create_app
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –∞–¥–º–∏–Ω–∫–∏
        app = create_app()
        
        with app.app_context():
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            db.create_all()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                username='testuser',
                email='test@example.com',
                password_hash=generate_password_hash('testpass')
            )
            db.session.add(user)
            db.session.commit()
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category = Category(
                name='–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
                slug='test-category',
                description='–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                color='#007bff'
            )
            db.session.add(category)
            db.session.commit()
            print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞")
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
            post = Post(
                title='–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç',
                slug='test-post',
                content='–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞',
                excerpt='–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
                author_id=user.id,
                category_id=category.id
            )
            db.session.add(post)
            db.session.commit()
            print("‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω")
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            comment = Comment(
                content='–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
                author_id=user.id,
                post_id=post.id
            )
            db.session.add(comment)
            db.session.commit()
            print("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π
            assert post.author == user
            assert post.category == category
            assert comment.post == post
            assert comment.author == user
            print("‚úÖ –°–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
            
            # –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –º–æ–¥–µ–ª–µ–π
            assert user.get_full_name() == 'testuser'
            assert post.get_comments_count() == 1
            assert post.get_reading_time() > 0
            print("‚úÖ –ú–µ—Ç–æ–¥—ã –º–æ–¥–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç")
            
            # –¢–µ—Å—Ç –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            avatar_url = user.get_avatar_url()
            assert avatar_url is not None
            print("‚úÖ –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞–∑–æ–≤–æ–º —Ç–µ—Å—Ç–µ: {e}")
        return False

def test_ai_system():
    """–¢–µ—Å—Ç –ò–ò —Å–∏—Å—Ç–µ–º—ã"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        from blog.ai_provider_manager import AIProviderManager
        from blog.ai_content import AIContentGenerator
        
        # –¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        manager = AIProviderManager()
        providers = manager.get_available_providers()
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {providers}")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        generator = AIContentGenerator()
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ò–ò
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenAI (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
            if hasattr(generator, 'openai_client'):
                print("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception:
            print("‚ö†Ô∏è OpenAI –∫–ª–∏–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ò–ò —Ç–µ—Å—Ç–µ: {e}")
        return False

def test_security():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    try:
        from blog.security import init_security_headers
        from werkzeug.security import generate_password_hash, check_password_hash
        
        # –¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
        password = 'testpassword123'
        hash1 = generate_password_hash(password)
        hash2 = generate_password_hash(password)
        
        assert check_password_hash(hash1, password)
        assert check_password_hash(hash2, password)
        assert hash1 != hash2  # –†–∞–∑–Ω—ã–µ —Ö–µ—à–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
        print("‚úÖ –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        from flask import Flask
        app = Flask(__name__)
        init_security_headers(app)
        print("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
        return False

def test_monitoring():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    
    try:
        from blog.monitoring import SystemMonitor
        import psutil
        
        # –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã
        monitor = SystemMonitor()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        cpu_usage = monitor.get_cpu_usage()
        memory_usage = monitor.get_memory_usage()
        disk_usage = monitor.get_disk_usage()
        
        assert 0 <= cpu_usage <= 100
        assert 0 <= memory_usage <= 100
        assert 0 <= disk_usage <= 100
        print(f"‚úÖ CPU: {cpu_usage}%, RAM: {memory_usage}%, Disk: {disk_usage}%")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        return False

def test_seo():
    """–¢–µ—Å—Ç SEO —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SEO...")
    
    try:
        from blog.seo_optimizer import SEOOptimizer
        
        optimizer = SEOOptimizer()
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤
        meta_tags = optimizer.generate_meta_tags(
            title="–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç",
            description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞",
            keywords=["—Ç–µ—Å—Ç", "–±–ª–æ–≥", "python"]
        )
        
        assert 'title' in meta_tags
        assert 'description' in meta_tags
        assert 'og:title' in meta_tags
        assert 'twitter:card' in meta_tags
        print("‚úÖ SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ SEO
        from blog.seo_optimizer import SEOAnalyzer
        analyzer = SEOAnalyzer()
        
        # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        keywords = analyzer.extract_keywords("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        assert len(keywords) > 0
        print("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä SEO —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ SEO —Ç–µ—Å—Ç–µ: {e}")
        return False

def run_stress_test():
    """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüí™ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    try:
        import time
        import threading
        from concurrent.futures import ThreadPoolExecutor
        
        def stress_task(task_id):
            """–ó–∞–¥–∞—á–∞ –¥–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞"""
            start_time = time.time()
            
            # –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
            for i in range(100):
                # –ü—Ä–æ—Å—Ç—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
                result = sum(range(i))
                
            end_time = time.time()
            return f"–ó–∞–¥–∞—á–∞ {task_id}: {end_time - start_time:.3f}s"
        
        # –ó–∞–ø—É—Å–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        with ThreadPoolExecutor(max_workers=10) as executor:
            futures = [executor.submit(stress_task, i) for i in range(50)]
            results = [future.result() for future in futures]
        
        print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {len(results)} –∑–∞–¥–∞—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
        
        # –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏
        import psutil
        process = psutil.Process()
        memory_mb = process.memory_info().rss / 1024 / 1024
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_mb:.1f} MB")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–µ: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ë–õ–û–ì–ê")
    print("=" * 50)
    
    tests = [
        ("–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", test_basic_functionality),
        ("–ò–ò —Å–∏—Å—Ç–µ–º–∞", test_ai_system),
        ("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", test_security),
        ("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", test_monitoring),
        ("SEO", test_seo),
        ("–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç", run_stress_test)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üèÜ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)