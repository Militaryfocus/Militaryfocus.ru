#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤
"""

import ast
import os
from pathlib import Path

print("=" * 60)
print("üêç –ü–†–û–í–ï–†–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê PYTHON –§–ê–ô–õ–û–í")
print("=" * 60)

errors = []
checked = 0

# –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º Python —Ñ–∞–π–ª–∞–º
for root, dirs, files in os.walk('blog'):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º __pycache__
    if '__pycache__' in root:
        continue
        
    for file in files:
        if file.endswith('.py'):
            file_path = Path(root) / file
            checked += 1
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º AST –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                ast.parse(content)
                print(f"‚úÖ {file_path}")
                
            except SyntaxError as e:
                error_msg = f"‚ùå {file_path}: –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ {e.lineno}: {e.msg}"
                print(error_msg)
                errors.append(error_msg)
                
            except Exception as e:
                error_msg = f"‚ùå {file_path}: {str(e)}"
                print(error_msg)
                errors.append(error_msg)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ
root_files = ['app.py', 'install.py', 'ai_manager.py']
for file in root_files:
    if Path(file).exists():
        checked += 1
        try:
            with open(file, 'r', encoding='utf-8') as f:
                content = f.read()
            ast.parse(content)
            print(f"‚úÖ {file}")
        except SyntaxError as e:
            error_msg = f"‚ùå {file}: –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ {e.lineno}: {e.msg}"
            print(error_msg)
            errors.append(error_msg)
        except Exception as e:
            error_msg = f"‚ùå {file}: {str(e)}"
            print(error_msg)
            errors.append(error_msg)

print("\n" + "=" * 60)
print(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {checked}")
print(f"–ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(errors)}")

if errors:
    print("\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–®–ò–ë–ö–ò:")
    for error in errors:
        print(f"  {error}")
else:
    print("\n‚úÖ –í–°–ï –§–ê–ô–õ–´ –ò–ú–ï–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–´–ô –°–ò–ù–¢–ê–ö–°–ò–°!")

print("=" * 60)