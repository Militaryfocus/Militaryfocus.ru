#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ò–ò –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –±–ª–æ–≥–∞
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
"""

import os
import sys
import argparse
from datetime import datetime
import threading
import time

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from blog import create_app, db
from blog.ai_content import (
    AIContentGenerator, 
    ContentScheduler, 
    populate_blog_with_ai_content,
    start_ai_content_generation
)
from blog.integrated_ai_system import (
    integrated_ai_system,
    generate_safe_content,
    batch_generate_safe_content,
    get_ai_system_status,
    optimize_ai_system
)
from blog.integrated_content_manager import (
    integrated_content_manager,
    create_content,
    batch_create_content,
    get_content_manager_stats,
    get_system_status,
    optimize_existing_content,
    get_user_content_recommendations,
    get_user_analytics
)
from blog.ai_provider_manager import get_ai_provider_stats, get_available_ai_models
from blog.content_personalization import analyze_user_behavior, get_personalized_recommendations
from blog.seo_optimization import research_keywords, analyze_content_seo
from blog.ai_monitoring import ai_monitoring_dashboard
from blog.models import Post, User, Category, Comment

def create_sample_categories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    categories_data = [
        {'name': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'description': '–°—Ç–∞—Ç—å–∏ –æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö', 'color': '#007bff'},
        {'name': '–Ω–∞—É–∫–∞', 'description': '–ù–∞—É—á–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', 'color': '#28a745'},
        {'name': '–æ–±—â–µ—Å—Ç–≤–æ', 'description': '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –∫—É–ª—å—Ç—É—Ä–∞', 'color': '#ffc107'},
        {'name': '–±–∏–∑–Ω–µ—Å', 'description': '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —ç–∫–æ–Ω–æ–º–∏–∫–∞', 'color': '#dc3545'},
    ]
    
    created_count = 0
    for cat_data in categories_data:
        existing = Category.query.filter_by(name=cat_data['name']).first()
        if not existing:
            category = Category(**cat_data)
            db.session.add(category)
            created_count += 1
    
    db.session.commit()
    return created_count

def show_stats():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print("\n" + "="*60)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–õ–û–ì–ê")
    print("="*60)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_posts = Post.query.count()
    ai_posts = Post.query.filter(Post.content.contains('## ')).count()
    total_users = User.query.count()
    total_comments = Comment.query.count()
    
    print(f"üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}")
    print(f"ü§ñ –ò–ò –ø–æ—Å—Ç–æ–≤: {ai_posts} ({ai_posts/total_posts*100:.1f}% –æ—Ç –æ–±—â–µ–≥–æ)" if total_posts > 0 else "ü§ñ –ò–ò –ø–æ—Å—Ç–æ–≤: 0")
    print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
    print(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {total_comments}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = Category.query.all()
    print(f"\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ({len(categories)}):")
    for cat in categories:
        posts_count = cat.get_posts_count()
        print(f"  ‚Ä¢ {cat.name}: {posts_count} –ø–æ—Å—Ç–æ–≤")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ò–ò –ø–æ—Å—Ç—ã
    recent_ai_posts = Post.query.filter(Post.content.contains('## ')).order_by(Post.created_at.desc()).limit(5).all()
    if recent_ai_posts:
        print(f"\nü§ñ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ò–ò –ø–æ—Å—Ç—ã:")
        for post in recent_ai_posts:
            print(f"  ‚Ä¢ {post.title[:50]}{'...' if len(post.title) > 50 else ''}")
            print(f"    {post.created_at.strftime('%d.%m.%Y %H:%M')} | –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {post.views_count}")
    
    print("="*60)

def generate_content(args):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print(f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {args.count} –ø–æ—Å—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ò–ò...")
    
    if args.count > 50:
        print("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ —Ä–∞–∑: 50")
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    if hasattr(args, 'safe') and args.safe:
        print("üõ°Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
        results = batch_generate_safe_content(args.count)
        success_count = len([r for r in results if r.status.value in ['approved', 'published']])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        approved = len([r for r in results if r.status.value == 'approved'])
        needs_review = len([r for r in results if r.status.value == 'needs_review'])
        rejected = len([r for r in results if r.status.value == 'rejected'])
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        print(f"   ‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {approved}")
        print(f"   üëÅÔ∏è –¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {needs_review}")
        print(f"   ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected}")
        print(f"   üìà –û–±—â–∏–π —É—Å–ø–µ—Ö: {success_count}/{args.count}")
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        success_count = populate_blog_with_ai_content(args.count)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {success_count} –∏–∑ {args.count} –ø–æ—Å—Ç–æ–≤")

def start_scheduler(args):
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ò–ò –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    print("üìÖ –ü–æ—Å—Ç—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        start_ai_content_generation()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def test_generation(args):
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞...")
    
    try:
        generator = AIContentGenerator()
        post_data = generator.generate_human_like_post()
        
        print("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!")
        print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {post_data['title']}")
        print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {post_data['category']}")
        print(f"üè∑Ô∏è  –¢–µ–≥–∏: {', '.join(post_data['tags'][:3])}...")
        print(f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {post_data['quality_score']:.2f}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: {post_data['reading_time']} –º–∏–Ω")
        
        if args.show_content:
            print(f"\nüìÑ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
            print(post_data['content'][:200] + "...")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def cleanup_content(args):
    """–û—á–∏—Å—Ç–∫–∞ –ò–ò –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    if args.type == 'posts':
        ai_posts = Post.query.filter(Post.content.contains('## ')).all()
        count = len(ai_posts)
        
        if count == 0:
            print("‚ÑπÔ∏è  –ù–µ—Ç –ò–ò –ø–æ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
            
        if not args.force:
            confirm = input(f"‚ö†Ô∏è  –£–¥–∞–ª–∏—Ç—å {count} –ò–ò –ø–æ—Å—Ç–æ–≤? (y/N): ")
            if confirm.lower() != 'y':
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                return
        
        for post in ai_posts:
            db.session.delete(post)
        db.session.commit()
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –ò–ò –ø–æ—Å—Ç–æ–≤")
        
    elif args.type == 'users':
        ai_users = User.query.filter(
            User.username.like('fake_%') | User.email.like('%@example.%')
        ).all()
        count = len(ai_users)
        
        if count == 0:
            print("‚ÑπÔ∏è  –ù–µ—Ç –ò–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
            
        if not args.force:
            confirm = input(f"‚ö†Ô∏è  –£–¥–∞–ª–∏—Ç—å {count} –ò–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? (y/N): ")
            if confirm.lower() != 'y':
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                return
        
        for user in ai_users:
            Comment.query.filter_by(author_id=user.id).delete()
            db.session.delete(user)
        db.session.commit()
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –ò–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
    elif args.type == 'all':
        if not args.force:
            confirm = input("‚ö†Ô∏è  –£–¥–∞–ª–∏—Ç—å –í–°–ï –ò–ò –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å! (y/N): ")
            if confirm.lower() != 'y':
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                return
        
        # –£–¥–∞–ª—è–µ–º –ò–ò –ø–æ—Å—Ç—ã
        ai_posts = Post.query.filter(Post.content.contains('## ')).all()
        for post in ai_posts:
            db.session.delete(post)
        
        # –£–¥–∞–ª—è–µ–º –ò–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        ai_users = User.query.filter(
            User.username.like('fake_%') | User.email.like('%@example.%')
        ).all()
        for user in ai_users:
            Comment.query.filter_by(author_id=user.id).delete()
            db.session.delete(user)
        
        db.session.commit()
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ò–ò –¥–∞–Ω–Ω—ã–µ ({len(ai_posts)} –ø–æ—Å—Ç–æ–≤, {len(ai_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")

def setup_blog(args):
    """–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–ª–æ–≥–∞"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–ª–æ–≥–∞ –¥–ª—è –ò–ò –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cat_count = create_sample_categories()
    print(f"üìÇ –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {cat_count}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if args.with_content:
        print("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        success_count = populate_blog_with_ai_content(args.posts or 10)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {success_count}")
    
    print("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def ai_status(args):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ò–ò —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ò–ò —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        status = get_ai_system_status()
        
        print("\n" + "="*60)
        print("ü§ñ –°–¢–ê–¢–£–° –ò–ò –°–ò–°–¢–ï–ú–´")
        print("="*60)
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        ai_health = status.get('ai_health', {})
        print(f"üè• –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: {ai_health.get('status', 'unknown').upper()}")
        print(f"üìä –û—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: {ai_health.get('score', 0):.2f}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        gen_stats = status.get('generator_stats', {})
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        print(f"   –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {gen_stats.get('total_attempts', 0)}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {gen_stats.get('successful_generations', 0)}")
        print(f"   –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {gen_stats.get('auto_corrections', 0)}")
        print(f"   –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {gen_stats.get('manual_reviews', 0)}")
        print(f"   –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {gen_stats.get('rejections', 0)}")
        
        if gen_stats.get('total_attempts', 0) > 0:
            print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {gen_stats.get('success_rate', 0):.1%}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        mod_stats = status.get('moderation_stats', {})
        print(f"\nüëÅÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:")
        print(f"   –í –æ—á–µ—Ä–µ–¥–∏: {mod_stats.get('queue_size', 0)}")
        print(f"   –û–¥–æ–±—Ä–µ–Ω–æ: {mod_stats.get('approved_count', 0)}")
        print(f"   –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {mod_stats.get('rejected_count', 0)}")
        
        if mod_stats.get('total_moderated', 0) > 0:
            print(f"   –£—Ä–æ–≤–µ–Ω—å –æ–¥–æ–±—Ä–µ–Ω–∏—è: {mod_stats.get('approval_rate', 0):.1%}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = status.get('recommendations', [])
        if recommendations:
            print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for rec in recommendations:
                print(f"   ‚Ä¢ {rec}")
        
        print("="*60)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

def ai_optimize(args):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ò–ò —Å–∏—Å—Ç–µ–º—ã"""
    print("üîß –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ò–ò —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        optimize_ai_system()
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        print("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å:")
        ai_status(args)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")

def advanced_generate(args):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print(f"üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è {args.count} –ø–æ—Å—Ç–æ–≤...")
    
    if args.count > 20:
        print("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ —Ä–∞–∑: 20")
        return
    
    try:
        import asyncio
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        requests = []
        for i in range(args.count):
            from blog.integrated_content_manager import ContentCreationRequest, ContentWorkflow
            
            workflow = ContentWorkflow.SEO_OPTIMIZED_GENERATION if args.seo else ContentWorkflow.AI_GENERATION
            
            request = ContentCreationRequest(
                topic=f"–¢–µ–º–∞ {i+1}",
                content_type=args.content_type or "how_to_guide",
                tone=args.tone or "conversational",
                target_audience=args.audience or "general_public",
                keywords=args.keywords.split(',') if args.keywords else None,
                seo_optimized=args.seo,
                personalized=args.personalized,
                user_id=args.user_id if args.personalized else None
            )
            requests.append(request)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        async def generate_async():
            return await batch_create_content(requests)
        
        results = asyncio.run(generate_async())
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {len(results)}")
        
        for result in results:
            print(f"   ‚Ä¢ {result.title[:50]}{'...' if len(result.title) > 50 else ''}")
            print(f"     –ö–∞—á–µ—Å—Ç–≤–æ: {result.quality_score:.2f}, SEO: {result.seo_score:.2f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = get_content_manager_stats()
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
        print(f"   –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {stats['total_created']}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {stats['avg_quality_score']:.2f}")
        print(f"   –°—Ä–µ–¥–Ω–∏–π SEO –±–∞–ª–ª: {stats['avg_seo_score']:.2f}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

def keyword_research_cmd(args):
    """–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    print(f"üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ç–µ–º—ã: {args.topic}")
    
    try:
        keywords = research_keywords(args.topic, args.language)
        
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:")
        print("-" * 80)
        
        for i, kw in enumerate(keywords[:10], 1):
            print(f"{i:2d}. {kw.keyword}")
            print(f"    –û–±—ä–µ–º –ø–æ–∏—Å–∫–∞: {kw.search_volume:,}")
            print(f"    –°–ª–æ–∂–Ω–æ—Å—Ç—å: {kw.difficulty.value}")
            print(f"    CPC: ${kw.cpc:.2f}")
            print(f"    –¢—Ä–µ–Ω–¥: {kw.trend}")
            print()
        
        if len(keywords) > 10:
            print(f"... –∏ –µ—â–µ {len(keywords) - 10} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {e}")

def seo_analyze(args):
    """SEO –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    if not args.post_id:
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    try:
        post = Post.query.get(args.post_id)
        if not post:
            print(f"‚ùå –ü–æ—Å—Ç —Å ID {args.post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üîç SEO –∞–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞: {post.title}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–≥–æ–≤
        keywords = [tag.name for tag in post.tags]
        
        # –ü—Ä–æ–≤–æ–¥–∏–º SEO –∞–Ω–∞–ª–∏–∑
        seo_analysis = analyze_content_seo(post.content, post.title, "", keywords)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã SEO –∞–Ω–∞–ª–∏–∑–∞:")
        print("-" * 50)
        print(f"–û–±—â–∏–π SEO –±–∞–ª–ª: {seo_analysis.overall_seo_score:.2f}")
        print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {seo_analysis.title_score:.2f}")
        print(f"–ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ: {seo_analysis.meta_description_score:.2f}")
        print(f"–ö–æ–Ω—Ç–µ–Ω—Ç: {seo_analysis.content_score:.2f}")
        print(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞: {seo_analysis.structure_score:.2f}")
        print(f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {seo_analysis.keyword_density_score:.2f}")
        print(f"–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å: {seo_analysis.readability_score:.2f}")
        
        if seo_analysis.recommendations:
            print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for rec in seo_analysis.recommendations:
                print(f"   ‚Ä¢ {rec}")
        
        if seo_analysis.issues:
            print(f"\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã:")
            for issue in seo_analysis.issues:
                print(f"   ‚Ä¢ {issue}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SEO –∞–Ω–∞–ª–∏–∑–∞: {e}")

def user_analytics(args):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not args.user_id:
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        user = User.query.get(args.user_id)
        if not user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {args.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üë§ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        analytics = get_user_analytics(args.user_id)
        
        print(f"\nüìä –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        print("-" * 40)
        print(f"–°–µ–≥–º–µ–Ω—Ç—ã: {', '.join(analytics.get('user_segments', []))}")
        print(f"–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –¥–ª–∏–Ω–∞: {analytics.get('preferred_content_length', 'medium')}")
        print(f"–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–æ–Ω: {analytics.get('preferred_tone', 'conversational')}")
        print(f"–°–∫–æ—Ä–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è: {analytics.get('reading_speed', 200)} —Å–ª–æ–≤/–º–∏–Ω")
        print(f"–°—Ä–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è: {analytics.get('average_session_duration', 5):.1f} –º–∏–Ω")
        
        print(f"\nüìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:")
        print(f"–°–æ–∑–¥–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {analytics.get('posts_created', 0)}")
        print(f"–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {analytics.get('total_views', 0)}")
        print(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {analytics.get('comments_made', 0)}")
        print(f"–£—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏: {analytics.get('engagement_level', 'medium')}")
        
        # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_prefs = analytics.get('preferred_categories', {})
        if category_prefs:
            print(f"\nüìÇ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            for category, score in sorted(category_prefs.items(), key=lambda x: x[1], reverse=True)[:5]:
                print(f"   ‚Ä¢ {category}: {score:.2f}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        recommendations = get_user_content_recommendations(args.user_id, 5)
        if recommendations:
            print(f"\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:")
            for rec in recommendations:
                print(f"   ‚Ä¢ {rec['title'][:50]}{'...' if len(rec['title']) > 50 else ''}")
                print(f"     –û—Ü–µ–Ω–∫–∞: {rec['score']:.2f}, –ü—Ä–∏—á–∏–Ω—ã: {', '.join(rec['reasons'][:2])}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")

def system_status(args):
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        status = get_system_status()
        
        print("\n" + "="*60)
        print("ü§ñ –°–¢–ê–¢–£–° –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´")
        print("="*60)
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        print(f"üìÖ –í—Ä–µ–º—è: {status['timestamp']}")
        print(f"üìä –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á: {status['queue_size']}")
        print(f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {status['active_tasks']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        creation_stats = status['creation_stats']
        print(f"\nüìù –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:")
        print(f"   –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {creation_stats['total_created']}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {creation_stats['avg_quality_score']:.2f}")
        print(f"   –°—Ä–µ–¥–Ω–∏–π SEO –±–∞–ª–ª: {creation_stats['avg_seo_score']:.2f}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {creation_stats['avg_processing_time']:.2f}—Å")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–±–æ—á–∏–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º
        if creation_stats['by_workflow']:
            print(f"\nüîÑ –ü–æ —Ä–∞–±–æ—á–∏–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º:")
            for workflow, count in creation_stats['by_workflow'].items():
                print(f"   ‚Ä¢ {workflow}: {count}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        if creation_stats['by_status']:
            print(f"\nüìä –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
            for status_name, count in creation_stats['by_status'].items():
                print(f"   ‚Ä¢ {status_name}: {count}")
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components = status['components_status']
        print(f"\nüîß –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
        for component, status_name in components.items():
            emoji = "‚úÖ" if status_name == "active" else "‚ùå"
            print(f"   {emoji} {component}: {status_name}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        ai_stats = status['ai_provider_stats']
        if ai_stats:
            print(f"\nü§ñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
            print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {ai_stats.get('total_requests', 0)}")
            print(f"   –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {ai_stats.get('total_tokens', 0)}")
            print(f"   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${ai_stats.get('total_cost', 0):.2f}")
        
        print("="*60)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

def optimize_content_cmd(args):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    if not args.post_id:
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ—Å—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        return
    
    try:
        post = Post.query.get(args.post_id)
        if not post:
            print(f"‚ùå –ü–æ—Å—Ç —Å ID {args.post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–∞: {post.title}")
        
        import asyncio
        
        async def optimize_async():
            return await optimize_existing_content(args.post_id, args.type)
        
        result = asyncio.run(optimize_async())
        
        print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"–¢–∏–ø –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {result['optimization_type']}")
        
        if 'changes_made' in result:
            print(f"\nüìù –í–Ω–µ—Å–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
            for change in result['changes_made']:
                print(f"   ‚Ä¢ {change}")
        
        if 'seo_improvements' in result:
            print(f"\nüöÄ SEO —É–ª—É—á—à–µ–Ω–∏—è:")
            for improvement in result['seo_improvements']:
                print(f"   ‚Ä¢ {improvement}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ú–µ–Ω–µ–¥–∂–µ—Ä –ò–ò –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –±–ª–æ–≥–∞')
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_parser = subparsers.add_parser('stats', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    
    # –ö–æ–º–∞–Ω–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    generate_parser = subparsers.add_parser('generate', help='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç')
    generate_parser.add_argument('count', type=int, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤')
    generate_parser.add_argument('--safe', action='store_true', 
                               help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π')
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler_parser = subparsers.add_parser('scheduler', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_parser = subparsers.add_parser('test', help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä')
    test_parser.add_argument('--show-content', action='store_true', 
                           help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏
    cleanup_parser = subparsers.add_parser('cleanup', help='–û—á–∏—Å—Ç–∏—Ç—å –ò–ò –∫–æ–Ω—Ç–µ–Ω—Ç')
    cleanup_parser.add_argument('type', choices=['posts', 'users', 'all'],
                               help='–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏')
    cleanup_parser.add_argument('--force', action='store_true',
                               help='–ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')
    
    # –ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    setup_parser = subparsers.add_parser('setup', help='–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞')
    setup_parser.add_argument('--with-content', action='store_true',
                             help='–°–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç')
    setup_parser.add_argument('--posts', type=int, default=10,
                             help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤')
    
    # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –ò–ò —Å–∏—Å—Ç–µ–º—ã
    ai_status_parser = subparsers.add_parser('ai-status', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ò–ò —Å–∏—Å—Ç–µ–º—ã')
    
    ai_optimize_parser = subparsers.add_parser('ai-optimize', help='–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ò–ò —Å–∏—Å—Ç–µ–º—É')
    
    ai_monitor_parser = subparsers.add_parser('ai-monitor', help='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ò–ò —Å–∏—Å—Ç–µ–º—ã')
    
    # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    advanced_parser = subparsers.add_parser('advanced-generate', help='–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
    advanced_parser.add_argument('count', type=int, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
    advanced_parser.add_argument('--content-type', choices=['how_to_guide', 'comparison_review', 'analytical_article', 'news_article', 'listicle'], help='–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
    advanced_parser.add_argument('--tone', choices=['professional', 'conversational', 'authoritative', 'friendly', 'technical'], help='–¢–æ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
    advanced_parser.add_argument('--audience', choices=['beginners', 'intermediate', 'experts', 'general_public', 'professionals'], help='–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è')
    advanced_parser.add_argument('--keywords', help='–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
    advanced_parser.add_argument('--seo', action='store_true', help='SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è')
    advanced_parser.add_argument('--personalized', action='store_true', help='–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è')
    advanced_parser.add_argument('--user-id', type=int, help='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏')
    
    keywords_parser = subparsers.add_parser('keywords', help='–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤')
    keywords_parser.add_argument('topic', help='–¢–µ–º–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è')
    keywords_parser.add_argument('--language', default='ru', help='–Ø–∑—ã–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è')
    
    seo_parser = subparsers.add_parser('seo-analyze', help='SEO –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
    seo_parser.add_argument('post_id', type=int, help='ID –ø–æ—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    
    analytics_parser = subparsers.add_parser('user-analytics', help='–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    analytics_parser.add_argument('user_id', type=int, help='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    
    status_parser = subparsers.add_parser('system-status', help='–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã')
    
    optimize_parser = subparsers.add_parser('optimize-content', help='–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
    optimize_parser.add_argument('post_id', type=int, help='ID –ø–æ—Å—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏')
    optimize_parser.add_argument('--type', choices=['seo', 'personalization'], default='seo', help='–¢–∏–ø –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = create_app()
    with app.app_context():
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        db.create_all()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        if args.command == 'stats':
            show_stats()
        elif args.command == 'generate':
            generate_content(args)
        elif args.command == 'scheduler':
            start_scheduler(args)
        elif args.command == 'test':
            test_generation(args)
        elif args.command == 'cleanup':
            cleanup_content(args)
        elif args.command == 'setup':
            setup_blog(args)
        elif args.command == 'ai-status':
            ai_status(args)
        elif args.command == 'ai-optimize':
            ai_optimize(args)
        elif args.command == 'ai-monitor':
            ai_monitor(args)
        elif args.command == 'advanced-generate':
            advanced_generate(args)
        elif args.command == 'keywords':
            keyword_research_cmd(args)
        elif args.command == 'seo-analyze':
            seo_analyze(args)
        elif args.command == 'user-analytics':
            user_analytics(args)
        elif args.command == 'system-status':
            system_status(args)
        elif args.command == 'optimize-content':
            optimize_content_cmd(args)

if __name__ == '__main__':
    main()