#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ò–ò –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –±–ª–æ–≥–∞
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
"""

import os
import sys
import argparse
from datetime import datetime
import threading
import time

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from blog import create_app, db
from blog.ai_content import (
    AIContentGenerator, 
    ContentScheduler, 
    populate_blog_with_ai_content,
    start_ai_content_generation
)
from blog.models import Post, User, Category, Comment

def create_sample_categories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    categories_data = [
        {'name': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'description': '–°—Ç–∞—Ç—å–∏ –æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö', 'color': '#007bff'},
        {'name': '–Ω–∞—É–∫–∞', 'description': '–ù–∞—É—á–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', 'color': '#28a745'},
        {'name': '–æ–±—â–µ—Å—Ç–≤–æ', 'description': '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –∫—É–ª—å—Ç—É—Ä–∞', 'color': '#ffc107'},
        {'name': '–±–∏–∑–Ω–µ—Å', 'description': '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —ç–∫–æ–Ω–æ–º–∏–∫–∞', 'color': '#dc3545'},
    ]
    
    created_count = 0
    for cat_data in categories_data:
        existing = Category.query.filter_by(name=cat_data['name']).first()
        if not existing:
            category = Category(**cat_data)
            db.session.add(category)
            created_count += 1
    
    db.session.commit()
    return created_count

def show_stats():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print("\n" + "="*60)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–õ–û–ì–ê")
    print("="*60)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_posts = Post.query.count()
    ai_posts = Post.query.filter(Post.content.contains('## ')).count()
    total_users = User.query.count()
    total_comments = Comment.query.count()
    
    print(f"üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}")
    print(f"ü§ñ –ò–ò –ø–æ—Å—Ç–æ–≤: {ai_posts} ({ai_posts/total_posts*100:.1f}% –æ—Ç –æ–±—â–µ–≥–æ)" if total_posts > 0 else "ü§ñ –ò–ò –ø–æ—Å—Ç–æ–≤: 0")
    print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
    print(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {total_comments}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = Category.query.all()
    print(f"\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ({len(categories)}):")
    for cat in categories:
        posts_count = cat.get_posts_count()
        print(f"  ‚Ä¢ {cat.name}: {posts_count} –ø–æ—Å—Ç–æ–≤")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ò–ò –ø–æ—Å—Ç—ã
    recent_ai_posts = Post.query.filter(Post.content.contains('## ')).order_by(Post.created_at.desc()).limit(5).all()
    if recent_ai_posts:
        print(f"\nü§ñ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ò–ò –ø–æ—Å—Ç—ã:")
        for post in recent_ai_posts:
            print(f"  ‚Ä¢ {post.title[:50]}{'...' if len(post.title) > 50 else ''}")
            print(f"    {post.created_at.strftime('%d.%m.%Y %H:%M')} | –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {post.views_count}")
    
    print("="*60)

def generate_content(args):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print(f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {args.count} –ø–æ—Å—Ç–æ–≤...")
    
    if args.count > 50:
        print("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ —Ä–∞–∑: 50")
        return
    
    success_count = populate_blog_with_ai_content(args.count)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {success_count} –∏–∑ {args.count} –ø–æ—Å—Ç–æ–≤")

def start_scheduler(args):
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ò–ò –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    print("üìÖ –ü–æ—Å—Ç—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        start_ai_content_generation()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def test_generation(args):
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞...")
    
    try:
        generator = AIContentGenerator()
        post_data = generator.generate_human_like_post()
        
        print("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!")
        print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {post_data['title']}")
        print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {post_data['category']}")
        print(f"üè∑Ô∏è  –¢–µ–≥–∏: {', '.join(post_data['tags'][:3])}...")
        print(f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {post_data['quality_score']:.2f}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: {post_data['reading_time']} –º–∏–Ω")
        
        if args.show_content:
            print(f"\nüìÑ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
            print(post_data['content'][:200] + "...")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def cleanup_content(args):
    """–û—á–∏—Å—Ç–∫–∞ –ò–ò –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    if args.type == 'posts':
        ai_posts = Post.query.filter(Post.content.contains('## ')).all()
        count = len(ai_posts)
        
        if count == 0:
            print("‚ÑπÔ∏è  –ù–µ—Ç –ò–ò –ø–æ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
            
        if not args.force:
            confirm = input(f"‚ö†Ô∏è  –£–¥–∞–ª–∏—Ç—å {count} –ò–ò –ø–æ—Å—Ç–æ–≤? (y/N): ")
            if confirm.lower() != 'y':
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                return
        
        for post in ai_posts:
            db.session.delete(post)
        db.session.commit()
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –ò–ò –ø–æ—Å—Ç–æ–≤")
        
    elif args.type == 'users':
        ai_users = User.query.filter(
            User.username.like('fake_%') | User.email.like('%@example.%')
        ).all()
        count = len(ai_users)
        
        if count == 0:
            print("‚ÑπÔ∏è  –ù–µ—Ç –ò–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
            
        if not args.force:
            confirm = input(f"‚ö†Ô∏è  –£–¥–∞–ª–∏—Ç—å {count} –ò–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? (y/N): ")
            if confirm.lower() != 'y':
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                return
        
        for user in ai_users:
            Comment.query.filter_by(author_id=user.id).delete()
            db.session.delete(user)
        db.session.commit()
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –ò–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
    elif args.type == 'all':
        if not args.force:
            confirm = input("‚ö†Ô∏è  –£–¥–∞–ª–∏—Ç—å –í–°–ï –ò–ò –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å! (y/N): ")
            if confirm.lower() != 'y':
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                return
        
        # –£–¥–∞–ª—è–µ–º –ò–ò –ø–æ—Å—Ç—ã
        ai_posts = Post.query.filter(Post.content.contains('## ')).all()
        for post in ai_posts:
            db.session.delete(post)
        
        # –£–¥–∞–ª—è–µ–º –ò–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        ai_users = User.query.filter(
            User.username.like('fake_%') | User.email.like('%@example.%')
        ).all()
        for user in ai_users:
            Comment.query.filter_by(author_id=user.id).delete()
            db.session.delete(user)
        
        db.session.commit()
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ò–ò –¥–∞–Ω–Ω—ã–µ ({len(ai_posts)} –ø–æ—Å—Ç–æ–≤, {len(ai_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")

def setup_blog(args):
    """–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–ª–æ–≥–∞"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–ª–æ–≥–∞ –¥–ª—è –ò–ò –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cat_count = create_sample_categories()
    print(f"üìÇ –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {cat_count}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if args.with_content:
        print("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        success_count = populate_blog_with_ai_content(args.posts or 10)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {success_count}")
    
    print("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ú–µ–Ω–µ–¥–∂–µ—Ä –ò–ò –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –±–ª–æ–≥–∞')
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_parser = subparsers.add_parser('stats', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    
    # –ö–æ–º–∞–Ω–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    generate_parser = subparsers.add_parser('generate', help='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç')
    generate_parser.add_argument('count', type=int, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤')
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler_parser = subparsers.add_parser('scheduler', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫')
    
    # –ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_parser = subparsers.add_parser('test', help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä')
    test_parser.add_argument('--show-content', action='store_true', 
                           help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏
    cleanup_parser = subparsers.add_parser('cleanup', help='–û—á–∏—Å—Ç–∏—Ç—å –ò–ò –∫–æ–Ω—Ç–µ–Ω—Ç')
    cleanup_parser.add_argument('type', choices=['posts', 'users', 'all'],
                               help='–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏')
    cleanup_parser.add_argument('--force', action='store_true',
                               help='–ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')
    
    # –ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    setup_parser = subparsers.add_parser('setup', help='–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞')
    setup_parser.add_argument('--with-content', action='store_true',
                             help='–°–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç')
    setup_parser.add_argument('--posts', type=int, default=10,
                             help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = create_app()
    with app.app_context():
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        db.create_all()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        if args.command == 'stats':
            show_stats()
        elif args.command == 'generate':
            generate_content(args)
        elif args.command == 'scheduler':
            start_scheduler(args)
        elif args.command == 'test':
            test_generation(args)
        elif args.command == 'cleanup':
            cleanup_content(args)
        elif args.command == 'setup':
            setup_blog(args)

if __name__ == '__main__':
    main()