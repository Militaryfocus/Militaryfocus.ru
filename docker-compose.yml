version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: blog_postgres
    environment:
      POSTGRES_USER: ${DB_USER:-bloguser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-blogpass}
      POSTGRES_DB: ${DB_NAME:-blogdb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - blog_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-bloguser}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: blog_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - blog_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: blog_backend
    environment:
      FLASK_ENV: ${FLASK_ENV:-production}
      DATABASE_URL: postgresql://${DB_USER:-bloguser}:${DB_PASSWORD:-blogpass}@postgres:5432/${DB_NAME:-blogdb}
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-jwt-secret-key}
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - blog_network
    command: >
      sh -c "
        flask db upgrade &&
        gunicorn --bind 0.0.0.0:5000 --workers 4 --timeout 120 'app:create_app()'
      "

  # Frontend Vue.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:5000/api/v1}
    container_name: blog_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - blog_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: blog_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - backend_uploads:/var/www/uploads:ro
      - ./frontend/dist:/var/www/frontend:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - blog_network

  # Prometheus (optional monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: blog_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - blog_network
    profiles:
      - monitoring

  # Grafana (optional monitoring)
  grafana:
    image: grafana/grafana:latest
    container_name: blog_grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - blog_network
    profiles:
      - monitoring

networks:
  blog_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  backend_uploads:
  prometheus_data:
  grafana_data: