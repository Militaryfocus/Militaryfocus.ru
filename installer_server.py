#!/usr/bin/env python3
"""
–°–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ –ò–ò-–±–ª–æ–≥–∞
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É
"""

import os
import sys
import json
import subprocess
import tempfile
import shutil
from datetime import datetime
from flask import Flask, request, jsonify, render_template_string
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

# –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

class InstallerLogger:
    def __init__(self):
        self.logs = []
    
    def add_log(self, message, level='info'):
        timestamp = datetime.now().strftime('%H:%M:%S')
        log_entry = {
            'timestamp': timestamp,
            'message': message,
            'level': level
        }
        self.logs.append(log_entry)
        print(f"[{timestamp}] {level.upper()}: {message}")
    
    def get_logs(self):
        return self.logs

logger = InstallerLogger()

def run_command(command, cwd=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(
            command,
            shell=True,
            cwd=cwd or PROJECT_ROOT,
            capture_output=True,
            text=True,
            timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        )
        return {
            'success': result.returncode == 0,
            'stdout': result.stdout,
            'stderr': result.stderr,
            'returncode': result.returncode
        }
    except subprocess.TimeoutExpired:
        return {
            'success': False,
            'stdout': '',
            'stderr': '–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
            'returncode': -1
        }
    except Exception as e:
        return {
            'success': False,
            'stdout': '',
            'stderr': str(e),
            'returncode': -1
        }

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞"""
    with open('installer.html', 'r', encoding='utf-8') as f:
        return f.read()

@app.route('/api/check-system', methods=['POST'])
def check_system():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    logger.add_log('–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã...', 'info')
    
    checks = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    python_check = run_command('python3 --version')
    if python_check['success']:
        logger.add_log('‚úÖ Python –æ–±–Ω–∞—Ä—É–∂–µ–Ω', 'success')
        checks.append({'name': 'Python', 'status': 'ok', 'version': python_check['stdout'].strip()})
    else:
        logger.add_log('‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        checks.append({'name': 'Python', 'status': 'error'})
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ pip
    pip_check = run_command('pip3 --version')
    if pip_check['success']:
        logger.add_log('‚úÖ Pip –¥–æ—Å—Ç—É–ø–µ–Ω', 'success')
        checks.append({'name': 'Pip', 'status': 'ok'})
    else:
        logger.add_log('‚ùå Pip –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        checks.append({'name': 'Pip', 'status': 'error'})
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Git
    git_check = run_command('git --version')
    if git_check['success']:
        logger.add_log('‚úÖ Git –¥–æ—Å—Ç—É–ø–µ–Ω', 'success')
        checks.append({'name': 'Git', 'status': 'ok'})
    else:
        logger.add_log('‚ùå Git –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        checks.append({'name': 'Git', 'status': 'error'})
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
    disk_usage = shutil.disk_usage(PROJECT_ROOT)
    free_gb = disk_usage.free / (1024**3)
    if free_gb > 1:  # –ú–∏–Ω–∏–º—É–º 1 –ì–ë
        logger.add_log(f'‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {free_gb:.1f} –ì–ë', 'success')
        checks.append({'name': '–î–∏—Å–∫', 'status': 'ok', 'free': f'{free_gb:.1f} –ì–ë'})
    else:
        logger.add_log(f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {free_gb:.1f} –ì–ë', 'error')
        checks.append({'name': '–î–∏—Å–∫', 'status': 'error', 'free': f'{free_gb:.1f} –ì–ë'})
    
    all_ok = all(check['status'] == 'ok' for check in checks)
    
    if all_ok:
        logger.add_log('üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ!', 'success')
    
    return jsonify({
        'success': all_ok,
        'checks': checks,
        'logs': logger.get_logs()
    })

@app.route('/api/install-dependencies', methods=['POST'])
def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    logger.add_log('–ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...', 'info')
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    dependencies = [
        'flask', 'flask-sqlalchemy', 'flask-migrate', 'flask-login',
        'flask-wtf', 'flask-admin', 'requests', 'numpy', 'scikit-learn',
        'nltk', 'textstat', 'faker', 'openai', 'anthropic',
        'google-generativeai', 'transformers', 'torch',
        'python-slugify', 'markdown', 'bleach', 'psutil',
        'pymorphy3', 'matplotlib', 'seaborn', 'aiohttp', 'backoff'
    ]
    
    installed = []
    failed = []
    
    for dep in dependencies:
        logger.add_log(f'üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {dep}...', 'info')
        
        result = run_command(f'pip3 install {dep}')
        
        if result['success']:
            logger.add_log(f'‚úÖ {dep} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'success')
            installed.append(dep)
        else:
            logger.add_log(f'‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {dep}: {result["stderr"]}', 'error')
            failed.append(dep)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö NLTK
    logger.add_log('üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ NLTK...', 'info')
    nltk_data = [
        'punkt_tab', 'punkt', 'stopwords', 'averaged_perceptron_tagger',
        'averaged_perceptron_tagger_eng'
    ]
    
    for data in nltk_data:
        result = run_command(f'python3 -c "import nltk; nltk.download(\'{data}\')"')
        if result['success']:
            logger.add_log(f'‚úÖ NLTK {data} –∑–∞–≥—Ä—É–∂–µ–Ω', 'success')
        else:
            logger.add_log(f'‚ö†Ô∏è NLTK {data} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'warning')
    
    success = len(failed) == 0
    
    if success:
        logger.add_log('üéâ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!', 'success')
    else:
        logger.add_log(f'‚ö†Ô∏è {len(failed)} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'warning')
    
    return jsonify({
        'success': success,
        'installed': installed,
        'failed': failed,
        'logs': logger.get_logs()
    })

@app.route('/api/setup-database', methods=['POST'])
def setup_database():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    data = request.get_json()
    db_type = data.get('dbType', 'sqlite')
    
    logger.add_log(f'–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ({db_type})...', 'info')
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –±–ª–æ–≥–∞
        sys.path.append(os.path.join(PROJECT_ROOT, 'blog'))
        from blog import create_app, db
        from blog.models import User, Post, Category, Tag, Comment, View
        
        app = create_app()
        
        with app.app_context():
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            logger.add_log('üìä –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...', 'info')
            db.create_all()
            logger.add_log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã', 'success')
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            logger.add_log('üìÇ –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...', 'info')
            categories = [
                '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ù–∞—É–∫–∞', '–û–±—â–µ—Å—Ç–≤–æ', '–ë–∏–∑–Ω–µ—Å', '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç'
            ]
            
            for cat_name in categories:
                existing = Category.query.filter_by(name=cat_name).first()
                if not existing:
                    category = Category(name=cat_name)
                    db.session.add(category)
            
            db.session.commit()
            logger.add_log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã', 'success')
            
            logger.add_log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!', 'success')
            
            return jsonify({
                'success': True,
                'logs': logger.get_logs()
            })
            
    except Exception as e:
        logger.add_log(f'‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î: {str(e)}', 'error')
        return jsonify({
            'success': False,
            'error': str(e),
            'logs': logger.get_logs()
        })

@app.route('/api/setup-ai', methods=['POST'])
def setup_ai():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ò–ò —Å–µ—Ä–≤–∏—Å–æ–≤"""
    data = request.get_json()
    
    logger.add_log('–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ò–ò —Å–µ—Ä–≤–∏—Å—ã...', 'info')
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = {
            'openai_api_key': data.get('openaiKey', ''),
            'anthropic_api_key': data.get('anthropicKey', ''),
            'google_api_key': data.get('googleKey', ''),
            'local_models_enabled': True,
            'cache_enabled': True
        }
        
        config_file = os.path.join(PROJECT_ROOT, 'ai_config.json')
        with open(config_file, 'w') as f:
            json.dump(config, f, indent=2)
        
        logger.add_log('üìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ò–ò —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'success')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        logger.add_log('üè† –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏...', 'info')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –ò–ò –º–æ–¥—É–ª–µ–π
        sys.path.append(os.path.join(PROJECT_ROOT, 'blog'))
        try:
            from blog.advanced_content_generator import AdvancedContentGenerator
            from blog.ai_provider_manager import AIProviderManager
            
            generator = AdvancedContentGenerator()
            provider_manager = AIProviderManager()
            
            logger.add_log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success')
            
        except Exception as e:
            logger.add_log(f'‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏: {str(e)}', 'warning')
        
        logger.add_log('üéâ –ò–ò —Å–µ—Ä–≤–∏—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!', 'success')
        
        return jsonify({
            'success': True,
            'logs': logger.get_logs()
        })
        
    except Exception as e:
        logger.add_log(f'‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò: {str(e)}', 'error')
        return jsonify({
            'success': False,
            'error': str(e),
            'logs': logger.get_logs()
        })

@app.route('/api/create-admin', methods=['POST'])
def create_admin():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    data = request.get_json()
    
    username = data.get('username', 'admin')
    email = data.get('email', 'admin@example.com')
    password = data.get('password', '')
    
    if not password:
        return jsonify({
            'success': False,
            'error': '–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
            'logs': logger.get_logs()
        })
    
    logger.add_log(f'–°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {username}', 'info')
    
    try:
        sys.path.append(os.path.join(PROJECT_ROOT, 'blog'))
        from blog import create_app, db
        from blog.models import User
        
        app = create_app()
        
        with app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = User.query.filter_by(username=username).first()
            if existing_user:
                logger.add_log(f'‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'warning')
                return jsonify({
                    'success': True,
                    'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                    'logs': logger.get_logs()
                })
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                username=username,
                email=email,
                is_admin=True
            )
            user.set_password(password)
            
            db.session.add(user)
            db.session.commit()
            
            logger.add_log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω', 'success')
            logger.add_log('üéâ –£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –≥–æ—Ç–æ–≤–∞!', 'success')
            
            return jsonify({
                'success': True,
                'logs': logger.get_logs()
            })
            
    except Exception as e:
        logger.add_log(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞: {str(e)}', 'error')
        return jsonify({
            'success': False,
            'error': str(e),
            'logs': logger.get_logs()
        })

@app.route('/api/finalize-setup', methods=['POST'])
def finalize_setup():
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"""
    logger.add_log('–ó–∞–≤–µ—Ä—à–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É...', 'info')
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = {
            'installation_date': datetime.now().isoformat(),
            'version': '1.0.0',
            'features': [
                'advanced_content_generation',
                'ai_provider_management',
                'seo_optimization',
                'content_personalization',
                'monitoring_analytics'
            ]
        }
        
        config_file = os.path.join(PROJECT_ROOT, 'installation_config.json')
        with open(config_file, 'w') as f:
            json.dump(config, f, indent=2)
        
        logger.add_log('üìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'success')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        logger.add_log('üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã...', 'info')
        
        test_result = run_command('python3 production_test.py')
        if test_result['success']:
            logger.add_log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã', 'success')
        else:
            logger.add_log(f'‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã: {test_result["stderr"]}', 'warning')
        
        # –°–æ–∑–¥–∞–µ–º README
        readme_content = f"""# ü§ñ –ò–ò-–±–ª–æ–≥ - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

## üéâ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!

**–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**–í–µ—Ä—Å–∏—è:** 1.0.0

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞:
```bash
python3 app.py
```

### –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:
- **–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:** http://localhost:5000
- **–ò–ò –ø–∞–Ω–µ–ª—å:** http://localhost:5000/ai-dashboard
- **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:** http://localhost:5000/admin

### –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:
```bash
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
python3 ai_manager.py advanced-generate 5 --content-type how_to_guide

# SEO –∞–Ω–∞–ª–∏–∑
python3 ai_manager.py seo-analyze 1

# –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
python3 ai_manager.py system-status
```

## üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

- `ENHANCED_SYSTEM_GUIDE.md` - –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
- `AI_SYSTEM_DOCUMENTATION.md` - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

## üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞

–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –ò–ò —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª–µ `ai_config.json`.

## üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª–µ `blog_system.log`.
"""
        
        with open(os.path.join(PROJECT_ROOT, 'INSTALLATION_COMPLETE.md'), 'w', encoding='utf-8') as f:
            f.write(readme_content)
        
        logger.add_log('üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞', 'success')
        logger.add_log('üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'success')
        
        return jsonify({
            'success': True,
            'logs': logger.get_logs(),
            'urls': {
                'main': 'http://localhost:5000',
                'ai_dashboard': 'http://localhost:5000/ai-dashboard',
                'admin': 'http://localhost:5000/admin'
            }
        })
        
    except Exception as e:
        logger.add_log(f'‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}', 'error')
        return jsonify({
            'success': False,
            'error': str(e),
            'logs': logger.get_logs()
        })

@app.route('/api/start-server', methods=['POST'])
def start_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.add_log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä...', 'info')
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        result = run_command('python3 app.py &')
        
        if result['success']:
            logger.add_log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5000', 'success')
            return jsonify({
                'success': True,
                'message': '–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω',
                'logs': logger.get_logs()
            })
        else:
            logger.add_log(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {result["stderr"]}', 'error')
            return jsonify({
                'success': False,
                'error': result['stderr'],
                'logs': logger.get_logs()
            })
            
    except Exception as e:
        logger.add_log(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}', 'error')
        return jsonify({
            'success': False,
            'error': str(e),
            'logs': logger.get_logs()
        })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ –ò–ò-–±–ª–æ–≥–∞...")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8080")
    app.run(host='0.0.0.0', port=8080, debug=True)