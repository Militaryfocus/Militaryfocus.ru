#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
"""

import sys
import os
import time
import traceback
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–ª–æ–≥–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'blog'))

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from blog import create_app, db
        from blog.models import Post, Category, Tag, User, View
        from blog.advanced_content_generator import AdvancedContentGenerator
        from blog.ai_provider_manager import AIProviderManager
        from blog.content_personalization import ContentPersonalizer
        from blog.seo_optimization import ContentSEOAnalyzer, ContentSEOOptimizer
        from blog.integrated_content_manager import IntegratedContentManager
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        traceback.print_exc()
        return False

def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from blog import create_app, db
        from blog.models import Post, Category, Tag, User, View
        
        app = create_app()
        with app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            posts_count = Post.query.count()
            users_count = User.query.count()
            categories_count = Category.query.count()
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç:")
            print(f"   üìù –ü–æ—Å—Ç–æ–≤: {posts_count}")
            print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
            print(f"   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {categories_count}")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        traceback.print_exc()
        return False

def test_ai_components():
    """–¢–µ—Å—Ç –ò–ò –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    try:
        from blog.advanced_content_generator import AdvancedContentGenerator
        from blog.ai_provider_manager import AIProviderManager
        from blog.content_personalization import ContentPersonalizer
        from blog.seo_optimization import ContentSEOAnalyzer, ContentSEOOptimizer
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        generator = AdvancedContentGenerator()
        provider_manager = AIProviderManager()
        personalizer = ContentPersonalizer()
        seo_analyzer = ContentSEOAnalyzer()
        seo_optimizer = ContentSEOOptimizer()
        
        print("‚úÖ –í—Å–µ –ò–ò –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        test_content = generator.generate_content(
            topic="–¢–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞",
            content_type="how_to_guide",
            tone="conversational",
            audience="general_public",
            length="medium"
        )
        
        if test_content and test_content.get('content'):
            print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ò–ò –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
        traceback.print_exc()
        return False

def test_web_routes():
    """–¢–µ—Å—Ç –≤–µ–±-–º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–º–∞—Ä—à—Ä—É—Ç–æ–≤...")
    
    try:
        from blog import create_app
        
        app = create_app()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        routes_to_test = [
            '/',
            '/blog',
            '/ai-dashboard',
            '/ai-settings',
            '/content-analytics'
        ]
        
        with app.test_client() as client:
            for route in routes_to_test:
                try:
                    response = client.get(route)
                    if response.status_code in [200, 302, 401]:  # 401 - –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
                        print(f"‚úÖ {route}: {response.status_code}")
                    else:
                        print(f"‚ö†Ô∏è {route}: {response.status_code}")
                except Exception as e:
                    print(f"‚ùå {route}: {e}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–º–∞—Ä—à—Ä—É—Ç–æ–≤: {e}")
        traceback.print_exc()
        return False

def test_command_line():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    print("\nüíª –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏...")
    
    try:
        import subprocess
        
        # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–∞
        result = subprocess.run([
            'python3', 'ai_manager.py', 'system-status'
        ], capture_output=True, text=True, timeout=60)
        
        if result.returncode == 0:
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ system-status —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ system-status: {result.stderr}")
        
        # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        result = subprocess.run([
            'python3', 'ai_manager.py', 'stats'
        ], capture_output=True, text=True, timeout=60)
        
        if result.returncode == 0:
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ stats —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ stats: {result.stderr}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: {e}")
        traceback.print_exc()
        return False

def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        start_time = time.time()
        
        # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
        from blog.integrated_content_manager import IntegratedContentManager
        manager = IntegratedContentManager()
        
        init_time = time.time() - start_time
        print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã: {init_time:.2f}—Å")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        start_time = time.time()
        try:
            result = manager.create_batch_content(1)
            generation_time = time.time() - start_time
            print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {generation_time:.2f}—Å")
        except Exception as e:
            print(f"‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database),
        ("–ò–ò –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", test_ai_components),
        ("–í–µ–±-–º–∞—Ä—à—Ä—É—Ç—ã", test_web_routes),
        ("–ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞", test_command_line),
        ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", test_performance)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)