#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
"""

import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '/workspace')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
os.environ['SECRET_KEY'] = 'test-secret-key-for-development'
os.environ['DATABASE_URL'] = 'sqlite:///blog.db'

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
from blog import create_app, db
from blog.models_perfect import User
from blog.ai_content_perfect import PerfectAIContentGenerator, AIRequest, AIProvider, ContentType

def test_local_ai():
    """–¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = create_app()
    
    with app.app_context():
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db.create_all()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ò–ò –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        print("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞...")
        ai_generator = PerfectAIContentGenerator()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
        print("\nüìù –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä)...")
        try:
            request = AIRequest(
                prompt="–°–æ–∑–¥–∞–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç–µ–º—É '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ' –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ",
                content_type=ContentType.TITLE,
                provider=AIProvider.LOCAL,
                max_tokens=100,
                temperature=0.8,
                language='ru'
            )
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            import asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                response = loop.run_until_complete(ai_generator.generate_content(request))
                print(f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {response.content}")
                print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {response.tokens_used} —Ç–æ–∫–µ–Ω–æ–≤, –∫–∞—á–µ—Å—Ç–≤–æ: {response.quality_score}")
            finally:
                loop.close()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
        print("\nüìÑ –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä)...")
        try:
            request = AIRequest(
                prompt="–ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ' –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –î–ª–∏–Ω–∞ —Å—Ç–∞—Ç—å–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ 500 —Å–ª–æ–≤.",
                content_type=ContentType.POST,
                provider=AIProvider.LOCAL,
                max_tokens=500,
                temperature=0.7,
                language='ru'
            )
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                response = loop.run_until_complete(ai_generator.generate_content(request))
                print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–¥–ª–∏–Ω–∞: {len(response.content)} —Å–∏–º–≤–æ–ª–æ–≤)")
                print(f"üìñ –ü—Ä–µ–≤—å—é: {response.content[:200]}...")
                print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {response.tokens_used} —Ç–æ–∫–µ–Ω–æ–≤, –∫–∞—á–µ—Å—Ç–≤–æ: {response.quality_score}")
            finally:
                loop.close()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–≥–æ–≤ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
        print("\nüè∑Ô∏è –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ (–ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä)...")
        try:
            request = AIRequest(
                prompt="–°–æ–∑–¥–∞–π 5 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–µ–≥–æ–≤ –¥–ª—è —Å—Ç–∞—Ç—å–∏ –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ –≤ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ",
                content_type=ContentType.TAG,
                provider=AIProvider.LOCAL,
                max_tokens=100,
                temperature=0.5,
                language='ru'
            )
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                response = loop.run_until_complete(ai_generator.generate_content(request))
                print(f"‚úÖ –¢–µ–≥–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {response.content}")
                print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {response.tokens_used} —Ç–æ–∫–µ–Ω–æ–≤, –∫–∞—á–µ—Å—Ç–≤–æ: {response.quality_score}")
            finally:
                loop.close()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ò–ò —Å–∏—Å—Ç–µ–º—ã
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ò–ò —Å–∏—Å—Ç–µ–º—ã:")
        try:
            stats = ai_generator.get_system_stats()
            print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
            print(f"   - –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {stats['available_providers']}")
            print(f"   - –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {stats['cache_size']}")
            if stats['provider_stats']:
                print(f"   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {stats['provider_stats']}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("=" * 50)

if __name__ == '__main__':
    test_local_ai()