#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ó–∞–º–µ–Ω—è–µ—Ç 'from blog import db' –Ω–∞ 'from blog.database import db'
"""
import os
import re
import shutil
from datetime import datetime
from pathlib import Path

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
DIRECTORIES_TO_PROCESS = [
    'blog/models',
    'blog/routes',
    'blog/services',
    'blog'
]

# –§–∞–π–ª—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
EXCLUDE_FILES = [
    '__init__.py',
    'database.py'
]

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã
PATTERNS = [
    # –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω
    (r'from blog import db\b', 'from blog.database import db'),
    # –ü–∞—Ç—Ç–µ—Ä–Ω —Å –∞–ª–∏–∞—Å–æ–º
    (r'from blog import db as database\b', 'from blog.database import db as database'),
    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å db
    (r'from blog import ([^,\n]*),\s*db\b', r'from blog import \1\nfrom blog.database import db'),
    (r'from blog import db,\s*([^,\n]*)', r'from blog.database import db\nfrom blog import \1'),
]

def backup_file(filepath):
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞"""
    backup_path = f"{filepath}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    shutil.copy2(filepath, backup_path)
    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")

def process_file(filepath):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª"""
    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∑–∞–º–µ–Ω–∞
        original_content = content
        modified = False
        
        for pattern, replacement in PATTERNS:
            if re.search(pattern, content):
                content = re.sub(pattern, replacement, content)
                modified = True
        
        if modified:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_file(filepath)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: {filepath}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            lines_before = original_content.split('\n')
            lines_after = content.split('\n')
            
            for i, (before, after) in enumerate(zip(lines_before, lines_after)):
                if before != after:
                    print(f"    –°—Ç—Ä–æ–∫–∞ {i+1}:")
                    print(f"      - {before}")
                    print(f"      + {after}")
            
            return True
        else:
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {filepath}: {e}")
        return False

def find_python_files(directory):
    """–ù–∞–π—Ç–∏ –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    python_files = []
    
    for root, dirs, files in os.walk(directory):
        # –ò—Å–∫–ª—é—á–∞–µ–º __pycache__
        dirs[:] = [d for d in dirs if d != '__pycache__']
        
        for file in files:
            if file.endswith('.py') and file not in EXCLUDE_FILES:
                python_files.append(os.path.join(root, file))
    
    return python_files

def analyze_imports(directory):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã"""
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ {directory}...")
    
    files_with_old_import = []
    python_files = find_python_files(directory)
    
    for filepath in python_files:
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            for pattern, _ in PATTERNS:
                if re.search(pattern, content):
                    files_with_old_import.append(filepath)
                    break
                    
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {filepath}: {e}")
    
    return files_with_old_import

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    if not os.path.exists('blog') or not os.path.exists('app.py'):
        print("‚ùå –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞!")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    all_files_to_update = []
    
    for directory in DIRECTORIES_TO_PROCESS:
        if os.path.exists(directory):
            files = analyze_imports(directory)
            all_files_to_update.extend(files)
    
    if not all_files_to_update:
        print("\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç!")
        return
    
    print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(all_files_to_update)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
    for file in all_files_to_update:
        print(f"  - {file}")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (y/N): ")
    if response.lower() != 'y':
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    print("\nüîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...")
    updated_count = 0
    
    for filepath in all_files_to_update:
        print(f"\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {filepath}...")
        if process_file(filepath):
            updated_count += 1
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {updated_count}/{len(all_files_to_update)}")
    
    if updated_count < len(all_files_to_update):
        print(f"‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
    
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: git diff")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: python app.py")
    print("3. –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–∞–∫–æ–º–º–∏—Ç—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    print("4. –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π (.backup_*)")

if __name__ == "__main__":
    main()