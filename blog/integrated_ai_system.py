"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ò–ò —Å –∑–∞—â–∏—Ç–Ω—ã–º–∏ –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ò–ò-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
"""

import os
import time
import logging
from datetime import datetime
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from enum import Enum

from blog.ai_validation import ai_content_validator, ValidationResult
from blog.enhanced_ai_content import EnhancedAIContentGenerator
from blog.error_detection import error_detector
from blog.bias_mitigation import bias_detector
from blog.ai_monitoring import track_ai_content_generation, ai_monitoring_dashboard
from blog.fault_tolerance import ai_circuit_breaker, safe_db_operation
from blog.monitoring import monitoring_system

logger = logging.getLogger(__name__)

class ContentStatus(Enum):
    """–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    DRAFT = "draft"
    APPROVED = "approved"
    REJECTED = "rejected"
    NEEDS_REVIEW = "needs_review"
    NEEDS_CORRECTION = "needs_correction"
    PUBLISHED = "published"

@dataclass
class ContentGenerationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    content: str
    title: str
    excerpt: str
    category: str
    tags: List[str]
    status: ContentStatus
    quality_score: float
    safety_score: float
    bias_score: float
    error_count: int
    processing_time: float
    validation_report: Any
    corrections_applied: List[str]
    recommendations: List[str]
    metadata: Dict[str, Any]

class SafeAIContentGenerator:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ò–ò-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç–æ–π"""
    
    def __init__(self):
        self.base_generator = EnhancedAIContentGenerator()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.safety_config = {
            'min_quality_score': 0.7,
            'max_bias_score': 0.3,
            'min_safety_score': 0.8,
            'max_error_count': 5,
            'max_hallucination_risk': 0.4,
            'auto_correction_enabled': True,
            'manual_review_threshold': 0.6
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
        self.generation_stats = {
            'total_attempts': 0,
            'successful_generations': 0,
            'auto_corrections': 0,
            'manual_reviews': 0,
            'rejections': 0
        }
    
    @ai_circuit_breaker
    def generate_safe_content(self, category: str = None, topic: str = None,
                            max_attempts: int = 3) -> Optional[ContentGenerationResult]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        start_time = time.time()
        generation_start = time.time()
        
        self.generation_stats['total_attempts'] += 1
        
        try:
            # –≠—Ç–∞–ø 1: –ë–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            logger.info(f"ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è={category}, —Ç–µ–º–∞={topic}")
            
            base_content = self.base_generator.generate_validated_post(category, topic, max_attempts)
            if not base_content:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
                return None
            
            generation_time = time.time() - generation_start
            validation_start = time.time()
            
            # –≠—Ç–∞–ø 2: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            logger.info("üîç –ü—Ä–æ–≤–æ–¥–∏–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            validation_report = ai_content_validator.validate_content(
                base_content['content'], 
                base_content['title'], 
                base_content['category']
            )
            
            validation_time = time.time() - validation_start
            correction_start = time.time()
            
            # –≠—Ç–∞–ø 3: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
            logger.info("üîß –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏")
            errors = error_detector.detect_all_errors(base_content['content'])
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
            corrected_content = base_content['content']
            applied_corrections = []
            
            if self.safety_config['auto_correction_enabled'] and errors:
                corrected_content, corrections = error_detector.auto_correct_text(
                    base_content['content'], min_confidence=0.8
                )
                applied_corrections.extend([f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞: {c.description}" for c in corrections])
                self.generation_stats['auto_corrections'] += len(corrections)
            
            # –≠—Ç–∞–ø 4: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏
            logger.info("‚öñÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç—å")
            bias_report = bias_detector.get_bias_report(corrected_content)
            
            if bias_report['bias_score'] > self.safety_config['max_bias_score']:
                # –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç—å
                bias_corrected_content, bias_corrections = bias_detector.auto_correct_bias(
                    corrected_content, min_confidence=0.7
                )
                if bias_corrections:
                    corrected_content = bias_corrected_content
                    applied_corrections.extend([f"–£—Å—Ç—Ä–∞–Ω–µ–Ω–∞ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç—å: {c.description}" for c in bias_corrections])
            
            correction_time = time.time() - correction_start
            
            # –≠—Ç–∞–ø 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            logger.info("üìä –ü—Ä–æ–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞")
            final_validation = ai_content_validator.validate_content(
                corrected_content, base_content['title'], base_content['category']
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            status = self._determine_content_status(
                final_validation, errors, bias_report, applied_corrections
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = self._generate_recommendations(
                final_validation, errors, bias_report, applied_corrections
            )
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = ContentGenerationResult(
                content=corrected_content,
                title=base_content['title'],
                excerpt=base_content['excerpt'],
                category=base_content['category'],
                tags=base_content['tags'],
                status=status,
                quality_score=final_validation.confidence_score,
                safety_score=final_validation.quality_metrics.get('safety_score', 0.0),
                bias_score=bias_report['bias_score'],
                error_count=len(errors),
                processing_time=time.time() - start_time,
                validation_report=final_validation,
                corrections_applied=applied_corrections,
                recommendations=recommendations,
                metadata={
                    'generation_time': generation_time,
                    'validation_time': validation_time,
                    'correction_time': correction_time,
                    'original_content_length': len(base_content['content']),
                    'final_content_length': len(corrected_content),
                    'auto_corrections_count': len(applied_corrections)
                }
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if status == ContentStatus.APPROVED:
                self.generation_stats['successful_generations'] += 1
            elif status in [ContentStatus.NEEDS_REVIEW, ContentStatus.NEEDS_CORRECTION]:
                self.generation_stats['manual_reviews'] += 1
            else:
                self.generation_stats['rejections'] += 1
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            track_ai_content_generation(
                corrected_content, base_content['title'], result.processing_time,
                generation_time, validation_time, correction_time,
                status == ContentStatus.APPROVED, base_content['category']
            )
            
            logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: —Å—Ç–∞—Ç—É—Å={status.value}, –∫–∞—á–µ—Å—Ç–≤–æ={result.quality_score:.3f}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            monitoring_system.error_tracker.record_error(e, {'function': 'generate_safe_content'})
            return None
    
    def _determine_content_status(self, validation_report, errors, bias_report, 
                                corrections) -> ContentStatus:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if validation_report.quality_metrics.get('safety_score', 0) < self.safety_config['min_safety_score']:
            return ContentStatus.REJECTED
        
        # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫
        if len(errors) > self.safety_config['max_error_count']:
            return ContentStatus.NEEDS_CORRECTION
        
        # –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏
        if bias_report['bias_score'] > self.safety_config['max_bias_score']:
            return ContentStatus.NEEDS_CORRECTION
        
        # –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        if validation_report.confidence_score < self.safety_config['min_quality_score']:
            return ContentStatus.NEEDS_CORRECTION
        
        # –¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (validation_report.confidence_score < self.safety_config['manual_review_threshold'] or
            len(corrections) > 3 or
            validation_report.result == ValidationResult.NEEDS_REVIEW):
            return ContentStatus.NEEDS_REVIEW
        
        # –û–¥–æ–±—Ä–µ–Ω–æ
        return ContentStatus.APPROVED
    
    def _generate_recommendations(self, validation_report, errors, bias_report, 
                                corrections) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        if validation_report.confidence_score < 0.8:
            recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–∏—Ç—å –æ–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—à–∏–±–∫–∞–º
        if errors:
            error_types = set(error.error_type.value for error in errors)
            if 'spelling' in error_types:
                recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é")
            if 'grammar' in error_types:
                recommendations.append("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")
            if 'logical' in error_types:
                recommendations.append("–£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏
        if bias_report['bias_score'] > 0.2:
            recommendations.extend(bias_report.get('recommendations', []))
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
        if len(corrections) > 2:
            recommendations.append("–ú–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if validation_report.suggestions:
            recommendations.extend(validation_report.suggestions[:3])  # –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        
        return recommendations[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    
    def get_generation_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        total = self.generation_stats['total_attempts']
        
        if total == 0:
            return self.generation_stats
        
        return {
            **self.generation_stats,
            'success_rate': self.generation_stats['successful_generations'] / total,
            'correction_rate': self.generation_stats['auto_corrections'] / total,
            'review_rate': self.generation_stats['manual_reviews'] / total,
            'rejection_rate': self.generation_stats['rejections'] / total
        }
    
    def update_safety_config(self, new_config: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.safety_config.update(new_config)
        logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_config}")

class ContentModerationSystem:
    """–°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.moderation_queue = []
        self.approved_content = []
        self.rejected_content = []
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        self.auto_moderation_rules = {
            'min_quality_threshold': 0.8,
            'max_bias_threshold': 0.2,
            'max_error_threshold': 2,
            'auto_approve_enabled': True,
            'auto_reject_enabled': True
        }
    
    def moderate_content(self, content_result: ContentGenerationResult) -> ContentStatus:
        """–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
        if (self.auto_moderation_rules['auto_approve_enabled'] and
            content_result.quality_score >= self.auto_moderation_rules['min_quality_threshold'] and
            content_result.bias_score <= self.auto_moderation_rules['max_bias_threshold'] and
            content_result.error_count <= self.auto_moderation_rules['max_error_threshold']):
            
            content_result.status = ContentStatus.APPROVED
            self.approved_content.append(content_result)
            logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω: {content_result.title}")
            return ContentStatus.APPROVED
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        if (self.auto_moderation_rules['auto_reject_enabled'] and
            (content_result.safety_score < 0.6 or
             content_result.bias_score > 0.6 or
             content_result.error_count > 10)):
            
            content_result.status = ContentStatus.REJECTED
            self.rejected_content.append(content_result)
            logger.info(f"‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω: {content_result.title}")
            return ContentStatus.REJECTED
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Ä—É—á–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é
        content_result.status = ContentStatus.NEEDS_REVIEW
        self.moderation_queue.append(content_result)
        logger.info(f"üëÅÔ∏è –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {content_result.title}")
        return ContentStatus.NEEDS_REVIEW
    
    def get_moderation_queue(self) -> List[ContentGenerationResult]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        return self.moderation_queue.copy()
    
    def approve_content(self, content_id: int) -> bool:
        """–û–¥–æ–±—Ä–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        if 0 <= content_id < len(self.moderation_queue):
            content = self.moderation_queue.pop(content_id)
            content.status = ContentStatus.APPROVED
            self.approved_content.append(content)
            logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: {content.title}")
            return True
        return False
    
    def reject_content(self, content_id: int, reason: str = "") -> bool:
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        if 0 <= content_id < len(self.moderation_queue):
            content = self.moderation_queue.pop(content_id)
            content.status = ContentStatus.REJECTED
            content.metadata['rejection_reason'] = reason
            self.rejected_content.append(content)
            logger.info(f"‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: {content.title} (–ø—Ä–∏—á–∏–Ω–∞: {reason})")
            return True
        return False
    
    def get_moderation_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        return {
            'queue_size': len(self.moderation_queue),
            'approved_count': len(self.approved_content),
            'rejected_count': len(self.rejected_content),
            'total_moderated': len(self.approved_content) + len(self.rejected_content),
            'approval_rate': len(self.approved_content) / max(1, len(self.approved_content) + len(self.rejected_content))
        }

class IntegratedAISystem:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ò–ò"""
    
    def __init__(self):
        self.content_generator = SafeAIContentGenerator()
        self.moderation_system = ContentModerationSystem()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        self.system_config = {
            'auto_publish_enabled': False,
            'batch_generation_enabled': True,
            'max_concurrent_generations': 3,
            'quality_improvement_enabled': True
        }
    
    def generate_and_moderate_content(self, category: str = None, topic: str = None) -> Optional[ContentGenerationResult]:
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        content_result = self.content_generator.generate_safe_content(category, topic)
        
        if not content_result:
            return None
        
        # –ú–æ–¥–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        final_status = self.moderation_system.moderate_content(content_result)
        content_result.status = final_status
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        if (self.system_config['auto_publish_enabled'] and 
            final_status == ContentStatus.APPROVED):
            self._auto_publish_content(content_result)
        
        return content_result
    
    def _auto_publish_content(self, content_result: ContentGenerationResult):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            with safe_db_operation():
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –∏–∑ enhanced_ai_content
                from blog.enhanced_ai_content import enhanced_scheduler
                
                post_data = {
                    'title': content_result.title,
                    'content': content_result.content,
                    'excerpt': content_result.excerpt,
                    'category': content_result.category,
                    'tags': content_result.tags,
                    'validation_report': content_result.validation_report,
                    'generated_at': datetime.now()
                }
                
                success = enhanced_scheduler._create_post_in_db(post_data)
                
                if success:
                    content_result.status = ContentStatus.PUBLISHED
                    logger.info(f"üì∞ –ö–æ–Ω—Ç–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {content_result.title}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {content_result.title}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
    
    def batch_generate_content(self, count: int, categories: List[str] = None) -> List[ContentGenerationResult]:
        """–ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        results = []
        
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é {count} –µ–¥–∏–Ω–∏—Ü –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        
        for i in range(count):
            category = categories[i % len(categories)] if categories else None
            
            try:
                result = self.generate_and_moderate_content(category)
                if result:
                    results.append(result)
                    logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç {i+1}/{count}: {result.title}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç {i+1}/{count}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
                time.sleep(2)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ {i+1}/{count}: {e}")
        
        logger.info(f"üèÅ –ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(results)}/{count} —É—Å–ø–µ—à–Ω–æ")
        return results
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        return {
            'timestamp': datetime.now().isoformat(),
            'generator_stats': self.content_generator.get_generation_statistics(),
            'moderation_stats': self.moderation_system.get_moderation_stats(),
            'ai_health': ai_monitoring_dashboard._get_system_health_status(),
            'system_config': self.system_config,
            'recommendations': self._get_system_recommendations()
        }
    
    def _get_system_recommendations(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Å–∏—Å—Ç–µ–º–µ"""
        recommendations = []
        
        gen_stats = self.content_generator.get_generation_statistics()
        mod_stats = self.moderation_system.get_moderation_stats()
        
        if gen_stats.get('success_rate', 0) < 0.7:
            recommendations.append("–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        if gen_stats.get('rejection_rate', 0) > 0.3:
            recommendations.append("–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π - –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
        
        if mod_stats.get('queue_size', 0) > 10:
            recommendations.append("–ë–æ–ª—å—à–∞—è –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é")
        
        if not recommendations:
            recommendations.append("–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        
        return recommendations
    
    def optimize_system_parameters(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã")
        
        gen_stats = self.content_generator.get_generation_statistics()
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞
        if gen_stats.get('rejection_rate', 0) > 0.4:
            # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π - —Å–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            current_threshold = self.content_generator.safety_config['min_quality_score']
            new_threshold = max(0.6, current_threshold - 0.05)
            self.content_generator.update_safety_config({'min_quality_score': new_threshold})
            logger.info(f"üìâ –°–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞: {current_threshold} ‚Üí {new_threshold}")
        
        elif gen_stats.get('success_rate', 0) > 0.9:
            # –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π —É—Å–ø–µ—Ö - –º–æ–∂–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            current_threshold = self.content_generator.safety_config['min_quality_score']
            new_threshold = min(0.9, current_threshold + 0.05)
            self.content_generator.update_safety_config({'min_quality_score': new_threshold})
            logger.info(f"üìà –ü–æ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞: {current_threshold} ‚Üí {new_threshold}")
        
        logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
integrated_ai_system = IntegratedAISystem()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def generate_safe_content(category: str = None, topic: str = None) -> Optional[ContentGenerationResult]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    return integrated_ai_system.generate_and_moderate_content(category, topic)

def batch_generate_safe_content(count: int, categories: List[str] = None) -> List[ContentGenerationResult]:
    """–ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    return integrated_ai_system.batch_generate_content(count, categories)

def get_ai_system_status() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ò–ò-—Å–∏—Å—Ç–µ–º—ã"""
    return integrated_ai_system.get_system_status()

def optimize_ai_system():
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ò–ò-—Å–∏—Å—Ç–µ–º—ã"""
    return integrated_ai_system.optimize_system_parameters()