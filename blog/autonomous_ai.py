"""
–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –ò–ò —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
–ò–ò —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–µ–≥–∏, –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –±–ª–æ–≥–∞
"""

import os
import json
import random
import time
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple
import requests
from collections import Counter, defaultdict
import re
import logging

from blog.models import Post, Category, Tag, User, Comment
from blog import db
from blog.ai_content import AIContentGenerator
from blog.security import log_security_event

logger = logging.getLogger(__name__)

class AutonomousContentManager:
    """–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ò–ò"""
    
    def __init__(self):
        self.ai_generator = AIContentGenerator()
        self.content_planner = ContentPlanner()
        self.category_manager = CategoryManager()
        self.tag_manager = TagManager()
        self.trend_analyzer = TrendAnalyzer()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.stats = {
            'categories_created': 0,
            'tags_created': 0,
            'posts_generated': 0,
            'trends_analyzed': 0,
            'last_analysis': None
        }
    
    def run_autonomous_cycle(self) -> Dict:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ò–ò —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º")
        
        results = {
            'timestamp': datetime.now(),
            'categories_created': 0,
            'tags_created': 0,
            'posts_generated': 0,
            'trends_analyzed': 0,
            'errors': []
        }
        
        try:
            # 1. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º
            logger.info("üìä –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤...")
            trends = self.trend_analyzer.analyze_current_trends()
            results['trends_analyzed'] = len(trends)
            
            # 2. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤
            logger.info("üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
            new_categories = self.category_manager.create_trending_categories(trends)
            results['categories_created'] = len(new_categories)
            
            # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            logger.info("üè∑Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤...")
            new_tags = self.tag_manager.generate_tags_for_categories(new_categories)
            results['tags_created'] = len(new_tags)
            
            # 4. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            logger.info("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
            content_plan = self.content_planner.create_content_plan(trends, new_categories)
            
            # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            logger.info("‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
            generated_posts = self.generate_content_batch(content_plan)
            results['posts_generated'] = len(generated_posts)
            
            # 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.stats.update({
                'categories_created': self.stats['categories_created'] + results['categories_created'],
                'tags_created': self.stats['tags_created'] + results['tags_created'],
                'posts_generated': self.stats['posts_generated'] + results['posts_generated'],
                'trends_analyzed': self.stats['trends_analyzed'] + results['trends_analyzed'],
                'last_analysis': datetime.now()
            })
            
            logger.info(f"‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω: {results}")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ü–∏–∫–ª–µ: {e}"
            logger.error(error_msg)
            results['errors'].append(error_msg)
            log_security_event('ai_autonomous_error', {'error': str(e)})
        
        return results
    
    def generate_content_batch(self, content_plan: List[Dict]) -> List[Post]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –ø–ª–∞–Ω—É"""
        generated_posts = []
        
        for plan_item in content_plan:
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
                post_data = self.ai_generator.generate_human_like_post(
                    category_name=plan_item['category'],
                    topic=plan_item['topic'],
                    style=plan_item.get('style', 'balanced'),
                    length=plan_item.get('length', 'medium')
                )
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                post = self.create_post_from_data(post_data, plan_item)
                if post:
                    generated_posts.append(post)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –¥–ª—è {plan_item}: {e}")
        
        return generated_posts
    
    def create_post_from_data(self, post_data: Dict, plan_item: Dict) -> Optional[Post]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = Category.query.filter_by(name=post_data['category']).first()
            if not category:
                category = Category(
                    name=post_data['category'],
                    description=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ç–µ–º: {', '.join(post_data['tags'][:3])}",
                    color=self.get_category_color(post_data['category'])
                )
                db.session.add(category)
                db.session.commit()
            
            # –ù–∞—Ö–æ–¥–∏–º –∞–≤—Ç–æ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ò–ò –∞–≤—Ç–æ—Ä–∞)
            author = User.query.filter_by(is_admin=True).first()
            if not author:
                author = self.create_ai_author()
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
            post = Post(
                title=post_data['title'],
                content=post_data['content'],
                excerpt=post_data.get('excerpt', post_data['content'][:200] + '...'),
                category_id=category.id,
                author_id=author.id,
                is_published=True,
                is_featured=plan_item.get('featured', False),
                published_at=datetime.utcnow()
            )
            
            db.session.add(post)
            db.session.commit()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏
            self.add_tags_to_post(post, post_data['tags'])
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ—Å—Ç: {post.title}")
            return post
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
            db.session.rollback()
            return None
    
    def create_ai_author(self) -> User:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ò–ò –∞–≤—Ç–æ—Ä–∞"""
        import secrets
        import string
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        ai_password = ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(24))
        
        ai_author = User(
            username='ai_author',
            email='ai@blog.com',
            first_name='–ò–ò',
            last_name='–ê–≤—Ç–æ—Ä',
            bio='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ò–ò –∞–≤—Ç–æ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
            is_admin=False
        )
        ai_author.set_password(ai_password)
        db.session.add(ai_author)
        db.session.commit()
        
        logger.info("‚úÖ –°–æ–∑–¥–∞–Ω –ò–ò –∞–≤—Ç–æ—Ä —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º")
        return ai_author
    
    def add_tags_to_post(self, post: Post, tag_names: List[str]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∫ –ø–æ—Å—Ç—É"""
        for tag_name in tag_names[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 —Ç–µ–≥–æ–≤
            tag = Tag.query.filter_by(name=tag_name).first()
            if not tag:
                tag = Tag(name=tag_name)
                db.session.add(tag)
                db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
            
            post.tags.append(tag)
        
        db.session.commit()
    
    def get_category_color(self, category_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        colors = {
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': '#007bff',
            '–Ω–∞—É–∫–∞': '#28a745',
            '–æ–±—â–µ—Å—Ç–≤–æ': '#ffc107',
            '–±–∏–∑–Ω–µ—Å': '#dc3545',
            '–∑–¥–æ—Ä–æ–≤—å–µ': '#17a2b8',
            '—Å–ø–æ—Ä—Ç': '#6f42c1',
            '–∏—Å–∫—É—Å—Å—Ç–≤–æ': '#fd7e14',
            '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': '#20c997',
            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': '#6c757d',
            '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': '#e83e8c'
        }
        return colors.get(category_name.lower(), '#6c757d')

class TrendAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º"""
    
    def __init__(self):
        self.trend_sources = [
            'https://trends.google.com/trends/api/dailytrends',
            'https://api.github.com/search/repositories',
            'https://newsapi.org/v2/top-headlines'
        ]
    
    def analyze_current_trends(self) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤"""
        trends = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        existing_trends = self.analyze_existing_content()
        trends.extend(existing_trends)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        external_trends = self.analyze_external_sources()
        trends.extend(external_trends)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–¥–∞ –∏ —Å–æ–±—ã—Ç–∏–π
        seasonal_trends = self.generate_seasonal_trends()
        trends.extend(seasonal_trends)
        
        return trends[:10]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-10 —Ç—Ä–µ–Ω–¥–æ–≤
    
    def analyze_existing_content(self) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤"""
        trends = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏
        popular_tags = db.session.query(Tag.name, db.func.count(Tag.id)).join(
            Tag.posts
        ).group_by(Tag.name).order_by(db.func.count(Tag.id).desc()).limit(5).all()
        
        for tag_name, count in popular_tags:
            trends.append({
                'topic': tag_name,
                'category': self.categorize_topic(tag_name),
                'popularity': count,
                'source': 'existing_content',
                'confidence': min(count / 10, 1.0)
            })
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        popular_categories = db.session.query(Category.name, db.func.count(Post.id)).join(
            Category.posts
        ).group_by(Category.name).order_by(db.func.count(Post.id).desc()).limit(3).all()
        
        for cat_name, count in popular_categories:
            trends.append({
                'topic': f"–Ω–æ–≤–æ—Å—Ç–∏ –≤ {cat_name}",
                'category': cat_name,
                'popularity': count,
                'source': 'existing_categories',
                'confidence': min(count / 5, 1.0)
            })
        
        return trends
    
    def analyze_external_sources(self) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç—Ä–µ–Ω–¥–æ–≤"""
        trends = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
        current_trends = [
            {'topic': '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', 'category': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'confidence': 0.9},
            {'topic': '—É—Å—Ç–æ–π—á–∏–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ', 'category': '–æ–±—â–µ—Å—Ç–≤–æ', 'confidence': 0.8},
            {'topic': '—Ü–∏—Ñ—Ä–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è', 'category': '–±–∏–∑–Ω–µ—Å', 'confidence': 0.7},
            {'topic': '–∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏', 'category': '–∑–¥–æ—Ä–æ–≤—å–µ', 'confidence': 0.8},
            {'topic': '—É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞', 'category': '–±–∏–∑–Ω–µ—Å', 'confidence': 0.7},
            {'topic': '–∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'category': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'confidence': 0.8},
            {'topic': '–≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º–∞—è —ç–Ω–µ—Ä–≥–∏—è', 'category': '–Ω–∞—É–∫–∞', 'confidence': 0.7},
            {'topic': '–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å', 'category': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'confidence': 0.6},
            {'topic': '–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è', 'category': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'confidence': 0.6},
            {'topic': '—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', 'category': '–æ–±—â–µ—Å—Ç–≤–æ', 'confidence': 0.7}
        ]
        
        for trend in current_trends:
            trend['source'] = 'external_analysis'
            trend['popularity'] = int(trend['confidence'] * 100)
            trends.append(trend)
        
        return trends
    
    def generate_seasonal_trends(self) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∑–æ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤"""
        trends = []
        current_month = datetime.now().month
        
        seasonal_topics = {
            1: [{'topic': '–Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ –ø–ª–∞–Ω—ã', 'category': '–æ–±—â–µ—Å—Ç–≤–æ'}, {'topic': '–∑–∏–º–Ω–∏–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞', 'category': '—Å–ø–æ—Ä—Ç'}],
            2: [{'topic': '–¥–µ–Ω—å —Å–≤—è—Ç–æ–≥–æ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∞', 'category': '–æ–±—â–µ—Å—Ç–≤–æ'}, {'topic': '–∑–∏–º–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã', 'category': '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'}],
            3: [{'topic': '–≤–µ—Å–µ–Ω–Ω—è—è –º–æ–¥–∞', 'category': '–∏—Å–∫—É—Å—Å—Ç–≤–æ'}, {'topic': '–≤–µ—Å–µ–Ω–Ω—è—è —É–±–æ—Ä–∫–∞', 'category': '–æ–±—â–µ—Å—Ç–≤–æ'}],
            4: [{'topic': '–ø–∞—Å—Ö–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏', 'category': '–æ–±—â–µ—Å—Ç–≤–æ'}, {'topic': '–≤–µ—Å–µ–Ω–Ω–∏–µ —Å–∞–¥—ã', 'category': '–∑–¥–æ—Ä–æ–≤—å–µ'}],
            5: [{'topic': '–º–∞–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏', 'category': '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'}, {'topic': '–≤–µ—Å–µ–Ω–Ω–∏–µ —Ü–≤–µ—Ç—ã', 'category': '–∏—Å–∫—É—Å—Å—Ç–≤–æ'}],
            6: [{'topic': '–ª–µ—Ç–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã', 'category': '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'}, {'topic': '–ª–µ—Ç–Ω–∏–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞', 'category': '—Å–ø–æ—Ä—Ç'}],
            7: [{'topic': '–ª–µ—Ç–Ω–∏–π –æ—Ç–¥—ã—Ö', 'category': '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'}, {'topic': '–ª–µ—Ç–Ω–∏–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª–∏', 'category': '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'}],
            8: [{'topic': '–ª–µ—Ç–Ω–∏–µ —Ñ—Ä—É–∫—Ç—ã', 'category': '–∑–¥–æ—Ä–æ–≤—å–µ'}, {'topic': '–ª–µ—Ç–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', 'category': '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'}],
            9: [{'topic': '–Ω–∞—á–∞–ª–æ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞', 'category': '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'}, {'topic': '–æ—Å–µ–Ω–Ω—è—è –º–æ–¥–∞', 'category': '–∏—Å–∫—É—Å—Å—Ç–≤–æ'}],
            10: [{'topic': '–æ—Å–µ–Ω–Ω–∏–µ –ª–∏—Å—Ç—å—è', 'category': '–∏—Å–∫—É—Å—Å—Ç–≤–æ'}, {'topic': '—Ö—ç–ª–ª–æ—É–∏–Ω', 'category': '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'}],
            11: [{'topic': '–æ—Å–µ–Ω–Ω–∏–µ –æ–≤–æ—â–∏', 'category': '–∑–¥–æ—Ä–æ–≤—å–µ'}, {'topic': '–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∏–º–µ', 'category': '–æ–±—â–µ—Å—Ç–≤–æ'}],
            12: [{'topic': '–Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏', 'category': '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'}, {'topic': '–∑–∏–º–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã', 'category': '–∑–¥–æ—Ä–æ–≤—å–µ'}]
        }
        
        month_trends = seasonal_topics.get(current_month, [])
        for trend in month_trends:
            trend['source'] = 'seasonal'
            trend['popularity'] = 50
            trend['confidence'] = 0.6
            trends.append(trend)
        
        return trends
    
    def categorize_topic(self, topic: str) -> str:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã"""
        topic_lower = topic.lower()
        
        tech_keywords = ['—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', '–∏–∏', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '—Ü–∏—Ñ—Ä–æ–≤–æ–π']
        science_keywords = ['–Ω–∞—É–∫–∞', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '–æ—Ç–∫—Ä—ã—Ç–∏–µ', '—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç', '—É—á–µ–Ω—ã–π', '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è']
        society_keywords = ['–æ–±—â–µ—Å—Ç–≤–æ', '—Å–æ—Ü–∏–∞–ª—å–Ω—ã–π', '–∫—É–ª—å—Ç—É—Ä–∞', '—Ç—Ä–∞–¥–∏—Ü–∏—è', '–æ–±—ã—á–∞–π', '—Å–æ–æ–±—â–µ—Å—Ç–≤–æ']
        business_keywords = ['–±–∏–∑–Ω–µ—Å', '—ç–∫–æ–Ω–æ–º–∏–∫–∞', '—Ñ–∏–Ω–∞–Ω—Å—ã', '–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ', '–∫–æ–º–ø–∞–Ω–∏—è', '—Ä—ã–Ω–æ–∫']
        health_keywords = ['–∑–¥–æ—Ä–æ–≤—å–µ', '–º–µ–¥–∏—Ü–∏–Ω–∞', '–ª–µ—á–µ–Ω–∏–µ', '–¥–∏–µ—Ç–∞', '—Ñ–∏—Ç–Ω–µ—Å', '—Å–ø–æ—Ä—Ç']
        
        if any(keyword in topic_lower for keyword in tech_keywords):
            return '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'
        elif any(keyword in topic_lower for keyword in science_keywords):
            return '–Ω–∞—É–∫–∞'
        elif any(keyword in topic_lower for keyword in society_keywords):
            return '–æ–±—â–µ—Å—Ç–≤–æ'
        elif any(keyword in topic_lower for keyword in business_keywords):
            return '–±–∏–∑–Ω–µ—Å'
        elif any(keyword in topic_lower for keyword in health_keywords):
            return '–∑–¥–æ—Ä–æ–≤—å–µ'
        else:
            return '–æ–±—â–µ—Å—Ç–≤–æ'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

class CategoryManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ò–ò"""
    
    def create_trending_categories(self, trends: List[Dict]) -> List[Category]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤"""
        created_categories = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_trends = defaultdict(list)
        for trend in trends:
            category_trends[trend['category']].append(trend)
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category_name, trend_list in category_trends.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            existing_category = Category.query.filter_by(name=category_name).first()
            if existing_category:
                continue
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = Category(
                name=category_name,
                description=self.generate_category_description(category_name, trend_list),
                color=self.get_category_color(category_name)
            )
            
            db.session.add(category)
            created_categories.append(category)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}")
        
        db.session.commit()
        return created_categories
    
    def generate_category_description(self, category_name: str, trends: List[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤"""
        trend_topics = [trend['topic'] for trend in trends[:3]]
        
        descriptions = {
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': f"–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã: {', '.join(trend_topics)}",
            '–Ω–∞—É–∫–∞': f"–ù–∞—É—á–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {', '.join(trend_topics)}",
            '–æ–±—â–µ—Å—Ç–≤–æ': f"–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –∫—É–ª—å—Ç—É—Ä–∞. –¢–µ–∫—É—â–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {', '.join(trend_topics)}",
            '–±–∏–∑–Ω–µ—Å': f"–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —ç–∫–æ–Ω–æ–º–∏–∫–∞. –¢—Ä–µ–Ω–¥—ã —Ä—ã–Ω–∫–∞: {', '.join(trend_topics)}",
            '–∑–¥–æ—Ä–æ–≤—å–µ': f"–ó–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –∏ –º–µ–¥–∏—Ü–∏–Ω–∞. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã: {', '.join(trend_topics)}",
            '—Å–ø–æ—Ä—Ç': f"–°–ø–æ—Ä—Ç –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {', '.join(trend_topics)}",
            '–∏—Å–∫—É—Å—Å—Ç–≤–æ': f"–ö—É–ª—å—Ç—É—Ä–∞ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏: {', '.join(trend_topics)}",
            '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': f"–¢—É—Ä–∏–∑–º –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {', '.join(trend_topics)}",
            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': f"–û–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã: {', '.join(trend_topics)}",
            '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': f"–î–æ—Å—É–≥ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {', '.join(trend_topics)}"
        }
        
        return descriptions.get(category_name, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_name}. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã: {', '.join(trend_topics)}")
    
    def get_category_color(self, category_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        colors = {
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': '#007bff',
            '–Ω–∞—É–∫–∞': '#28a745',
            '–æ–±—â–µ—Å—Ç–≤–æ': '#ffc107',
            '–±–∏–∑–Ω–µ—Å': '#dc3545',
            '–∑–¥–æ—Ä–æ–≤—å–µ': '#17a2b8',
            '—Å–ø–æ—Ä—Ç': '#6f42c1',
            '–∏—Å–∫—É—Å—Å—Ç–≤–æ': '#fd7e14',
            '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': '#20c997',
            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': '#6c757d',
            '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': '#e83e8c'
        }
        return colors.get(category_name.lower(), '#6c757d')

class TagManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–≥–æ–≤ —Å –ò–ò"""
    
    def generate_tags_for_categories(self, categories: List[Category]) -> List[Tag]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        created_tags = []
        
        for category in categories:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            tags = self.generate_category_tags(category.name)
            
            for tag_name in tags:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–≥
                existing_tag = Tag.query.filter_by(name=tag_name).first()
                if existing_tag:
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–≥
                tag = Tag(name=tag_name)
                db.session.add(tag)
                created_tags.append(tag)
                
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ–≥: {tag_name}")
        
        db.session.commit()
        return created_tags
    
    def generate_category_tags(self, category_name: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        tag_templates = {
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': ['–∏–∏', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–±–ª–æ–∫—á–µ–π–Ω', '–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', '–∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–æ–±–ª–∞—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–µ—â–µ–π', '–±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ', '–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å'],
            '–Ω–∞—É–∫–∞': ['–∫–æ—Å–º–æ—Å', '–±–∏–æ–ª–æ–≥–∏—è', '—Ñ–∏–∑–∏–∫–∞', '—Ö–∏–º–∏—è', '—ç–∫–æ–ª–æ–≥–∏—è', '–≥–µ–Ω–µ—Ç–∏–∫–∞', '–Ω–µ–π—Ä–æ–Ω–∞—É–∫–∏', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–∞—Ä—Ö–µ–æ–ª–æ–≥–∏—è', '–≥–µ–æ–ª–æ–≥–∏—è'],
            '–æ–±—â–µ—Å—Ç–≤–æ': ['–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–∫—É–ª—å—Ç—É—Ä–∞', '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '–∏—Å—Ç–æ—Ä–∏—è', '—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è', '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '—Å–æ—Ü–∏–æ–ª–æ–≥–∏—è', '–ø–æ–ª–∏—Ç–∏–∫–∞', '—ç–∫–æ–Ω–æ–º–∏–∫–∞', '—Å–ø–æ—Ä—Ç'],
            '–±–∏–∑–Ω–µ—Å': ['–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ', '—Å—Ç–∞—Ä—Ç–∞–ø—ã', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–ø—Ä–æ–¥–∞–∂–∏', '–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', '—Ñ–∏–Ω–∞–Ω—Å—ã', '–∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥', '–ª–∏–¥–µ—Ä—Å—Ç–≤–æ', '–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏'],
            '–∑–¥–æ—Ä–æ–≤—å–µ': ['–º–µ–¥–∏—Ü–∏–Ω–∞', '—Ñ–∏—Ç–Ω–µ—Å', '–¥–∏–µ—Ç–∞', '–ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ', '–ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞', '–ª–µ—á–µ–Ω–∏–µ', '–∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏', '—Å–ø–æ—Ä—Ç', '–ø–∏—Ç–∞–Ω–∏–µ', '—Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è'],
            '—Å–ø–æ—Ä—Ç': ['—Ñ—É—Ç–±–æ–ª', '–±–∞—Å–∫–µ—Ç–±–æ–ª', '—Ç–µ–Ω–Ω–∏—Å', '–ø–ª–∞–≤–∞–Ω–∏–µ', '–±–µ–≥', '–π–æ–≥–∞', '—Ñ–∏—Ç–Ω–µ—Å', '–æ–ª–∏–º–ø–∏–∞–¥–∞', '—á–µ–º–ø–∏–æ–Ω–∞—Ç', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'],
            '–∏—Å–∫—É—Å—Å—Ç–≤–æ': ['–∂–∏–≤–æ–ø–∏—Å—å', '—Å–∫—É–ª—å–ø—Ç—É—Ä–∞', '–º—É–∑—ã–∫–∞', '—Ç–µ–∞—Ç—Ä', '–∫–∏–Ω–æ', '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–¥–∏–∑–∞–π–Ω', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '–º–æ–¥–∞'],
            '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': ['—Ç—É—Ä–∏–∑–º', '–æ—Ç–¥—ã—Ö', '–≥–æ—Ä–æ–¥–∞', '—Å—Ç—Ä–∞–Ω—ã', '–∫—É–ª—å—Ç—É—Ä–∞', '—Ç—Ä–∞–¥–∏—Ü–∏–∏', '–∫—É—Ö–Ω—è', '–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', '–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', '–æ—Ç–∫—Ä—ã—Ç–∏—è'],
            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': ['–æ–±—É—á–µ–Ω–∏–µ', '—à–∫–æ–ª–∞', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–∫—É—Ä—Å—ã', '–Ω–∞–≤—ã–∫–∏', '—Ä–∞–∑–≤–∏—Ç–∏–µ', '–∑–Ω–∞–Ω–∏—è', '–º–µ—Ç–æ–¥–∏–∫–∏', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ–±—É—á–µ–Ω–∏—è', '—Å–∞–º–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'],
            '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': ['–∏–≥—Ä—ã', '—Ñ–∏–ª—å–º—ã', '—Å–µ—Ä–∏–∞–ª—ã', '–º—É–∑—ã–∫–∞', '–∫–Ω–∏–≥–∏', '—Ö–æ–±–±–∏', '—Å–æ–±—ã—Ç–∏—è', '—Ñ–µ—Å—Ç–∏–≤–∞–ª–∏', '–∫–æ–Ω—Ü–µ—Ä—Ç—ã', '–≤–µ—á–µ—Ä–∏–Ω–∫–∏']
        }
        
        base_tags = tag_templates.get(category_name.lower(), ['–æ–±—â–µ–µ', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ', '–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
        variations = ['–Ω–æ–≤–æ–µ', '–∞–∫—Ç—É–∞–ª—å–Ω–æ–µ', '—Ç—Ä–µ–Ω–¥', '2024', '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ', '–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ']
        additional_tags = random.sample(variations, min(2, len(variations)))
        
        return base_tags[:5] + additional_tags

class ContentPlanner:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ò–ò"""
    
    def create_content_plan(self, trends: List[Dict], categories: List[Category]) -> List[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        content_plan = []
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤
        for trend in trends[:5]:  # –¢–æ–ø-5 —Ç—Ä–µ–Ω–¥–æ–≤
            plan_item = {
                'topic': trend['topic'],
                'category': trend['category'],
                'style': self.choose_content_style(trend),
                'length': self.choose_content_length(trend),
                'featured': trend.get('confidence', 0) > 0.8,
                'priority': trend.get('popularity', 50)
            }
            content_plan.append(plan_item)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for category in categories:
            plan_item = {
                'topic': f"–≤–≤–µ–¥–µ–Ω–∏–µ –≤ {category.name}",
                'category': category.name,
                'style': 'educational',
                'length': 'medium',
                'featured': True,
                'priority': 80
            }
            content_plan.append(plan_item)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        content_plan.sort(key=lambda x: x['priority'], reverse=True)
        
        return content_plan[:10]  # –ú–∞–∫—Å–∏–º—É–º 10 –ø–æ—Å—Ç–æ–≤ –∑–∞ —Ä–∞–∑
    
    def choose_content_style(self, trend: Dict) -> str:
        """–í—ã–±–æ—Ä —Å—Ç–∏–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞"""
        styles = ['analytical', 'conversational', 'educational', 'news', 'opinion']
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞
        if trend.get('source') == 'external_analysis':
            return random.choice(['analytical', 'news'])
        elif trend.get('source') == 'seasonal':
            return random.choice(['conversational', 'educational'])
        else:
            return random.choice(styles)
    
    def choose_content_length(self, trend: Dict) -> str:
        """–í—ã–±–æ—Ä –¥–ª–∏–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        lengths = ['short', 'medium', 'long']
        
        # –ë–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if trend.get('popularity', 50) > 70:
            return 'long'
        elif trend.get('popularity', 50) > 40:
            return 'medium'
        else:
            return 'short'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
autonomous_manager = AutonomousContentManager()

def start_autonomous_content_generation():
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    
    try:
        results = autonomous_manager.run_autonomous_cycle()
        
        logger.info(f"‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {results}")
        return results
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return {'error': str(e)}

def get_autonomous_stats() -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    return autonomous_manager.stats