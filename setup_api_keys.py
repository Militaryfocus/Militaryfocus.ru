#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π –ò–ò —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import os
import json
import getpass
from pathlib import Path

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    config_file = Path('ai_config.json')
    if config_file.exists():
        with open(config_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    else:
        return {}

def save_config(config):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    config_file = Path('ai_config.json')
    with open(config_file, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)

def setup_openai(config):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI"""
    print("\nü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI")
    print("-" * 30)
    
    api_key = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ OpenAI API –∫–ª—é—á (sk-...): ").strip()
    
    if api_key:
        config['ai_providers']['openai']['enabled'] = True
        config['ai_providers']['openai']['api_key'] = api_key
        
        model = input("–ú–æ–¥–µ–ª—å (gpt-4, gpt-3.5-turbo) [gpt-4]: ").strip() or "gpt-4"
        config['ai_providers']['openai']['model'] = model
        
        max_tokens = input("–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ [2000]: ").strip()
        if max_tokens.isdigit():
            config['ai_providers']['openai']['max_tokens'] = int(max_tokens)
        
        temperature = input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (0.0-1.0) [0.7]: ").strip()
        if temperature.replace('.', '').isdigit():
            config['ai_providers']['openai']['temperature'] = float(temperature)
        
        print("‚úÖ OpenAI –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        print("‚ö†Ô∏è OpenAI –ø—Ä–æ–ø—É—â–µ–Ω")

def setup_anthropic(config):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Anthropic"""
    print("\nüß† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Anthropic")
    print("-" * 30)
    
    api_key = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ Anthropic API –∫–ª—é—á (sk-ant-...): ").strip()
    
    if api_key:
        config['ai_providers']['anthropic']['enabled'] = True
        config['ai_providers']['anthropic']['api_key'] = api_key
        
        model = input("–ú–æ–¥–µ–ª—å (claude-3-sonnet, claude-3-haiku) [claude-3-sonnet]: ").strip() or "claude-3-sonnet-20240229"
        config['ai_providers']['anthropic']['model'] = model
        
        max_tokens = input("–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ [2000]: ").strip()
        if max_tokens.isdigit():
            config['ai_providers']['anthropic']['max_tokens'] = int(max_tokens)
        
        temperature = input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (0.0-1.0) [0.7]: ").strip()
        if temperature.replace('.', '').isdigit():
            config['ai_providers']['anthropic']['temperature'] = float(temperature)
        
        print("‚úÖ Anthropic –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        print("‚ö†Ô∏è Anthropic –ø—Ä–æ–ø—É—â–µ–Ω")

def setup_google(config):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Gemini"""
    print("\nüîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Gemini")
    print("-" * 30)
    
    api_key = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ Google API –∫–ª—é—á (AI...): ").strip()
    
    if api_key:
        config['ai_providers']['google']['enabled'] = True
        config['ai_providers']['google']['api_key'] = api_key
        
        model = input("–ú–æ–¥–µ–ª—å (gemini-pro, gemini-pro-vision) [gemini-pro]: ").strip() or "gemini-pro"
        config['ai_providers']['google']['model'] = model
        
        max_tokens = input("–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ [2000]: ").strip()
        if max_tokens.isdigit():
            config['ai_providers']['google']['max_tokens'] = int(max_tokens)
        
        temperature = input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (0.0-1.0) [0.7]: ").strip()
        if temperature.replace('.', '').isdigit():
            config['ai_providers']['google']['temperature'] = float(temperature)
        
        print("‚úÖ Google Gemini –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        print("‚ö†Ô∏è Google Gemini –ø—Ä–æ–ø—É—â–µ–Ω")

def setup_local_models(config):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    print("\nüè† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
    print("-" * 30)
    
    enable_local = input("–í–∫–ª—é—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏? (y/n) [y]: ").strip().lower()
    
    if enable_local in ['', 'y', 'yes', '–¥–∞']:
        config['ai_providers']['local']['enabled'] = True
        
        device = input("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (cpu, cuda) [cpu]: ").strip() or "cpu"
        config['ai_providers']['local']['device'] = device
        
        cache_enabled = input("–í–∫–ª—é—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ? (y/n) [y]: ").strip().lower()
        config['ai_providers']['local']['cache_enabled'] = cache_enabled in ['', 'y', 'yes', '–¥–∞']
        
        print("‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    else:
        config['ai_providers']['local']['enabled'] = False
        print("‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")

def setup_cache(config):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("-" * 30)
    
    enable_cache = input("–í–∫–ª—é—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ? (y/n) [y]: ").strip().lower()
    
    if enable_cache in ['', 'y', 'yes', '–¥–∞']:
        config['cache']['enabled'] = True
        
        ttl = input("–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö [3600]: ").strip()
        if ttl.isdigit():
            config['cache']['ttl'] = int(ttl)
        
        max_size = input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ [1000]: ").strip()
        if max_size.isdigit():
            config['cache']['max_size'] = int(max_size)
        
        storage_path = input("–ü—É—Ç—å –∫ –∫—ç—à—É [./cache]: ").strip() or "./cache"
        config['cache']['storage_path'] = storage_path
        
        print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    else:
        config['cache']['enabled'] = False
        print("‚ö†Ô∏è –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")

def setup_monitoring(config):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("\nüìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print("-" * 30)
    
    enable_monitoring = input("–í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥? (y/n) [y]: ").strip().lower()
    
    if enable_monitoring in ['', 'y', 'yes', '–¥–∞']:
        config['monitoring']['enabled'] = True
        
        log_level = input("–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR) [INFO]: ").strip() or "INFO"
        config['monitoring']['log_level'] = log_level
        
        metrics_enabled = input("–í–∫–ª—é—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏? (y/n) [y]: ").strip().lower()
        config['monitoring']['metrics_enabled'] = metrics_enabled in ['', 'y', 'yes', '–¥–∞']
        
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        config['monitoring']['enabled'] = False
        print("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")

def test_configuration(config):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("-" * 30)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
        import sys
        sys.path.append('blog')
        
        from blog.ai_provider_manager import AIProviderManager
        
        provider_manager = AIProviderManager()
        print("‚úÖ AIProviderManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
        if config['ai_providers']['local']['enabled']:
            print("üè† –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏...")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π –ò–ò —Å–µ—Ä–≤–∏—Å–æ–≤")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    
    # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Å—Ç–∞—è, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if not config:
        config = {
            "ai_providers": {
                "openai": {
                    "enabled": False,
                    "api_key": "",
                    "model": "gpt-4",
                    "max_tokens": 2000,
                    "temperature": 0.7,
                    "timeout": 30
                },
                "anthropic": {
                    "enabled": False,
                    "api_key": "",
                    "model": "claude-3-sonnet-20240229",
                    "max_tokens": 2000,
                    "temperature": 0.7,
                    "timeout": 30
                },
                "google": {
                    "enabled": False,
                    "api_key": "",
                    "model": "gemini-pro",
                    "max_tokens": 2000,
                    "temperature": 0.7,
                    "timeout": 30
                },
                "local": {
                    "enabled": True,
                    "models": {
                        "text_generation": "microsoft/DialoGPT-medium",
                        "sentiment_analysis": "cardiffnlp/twitter-roberta-base-sentiment-latest",
                        "summarization": "facebook/bart-large-cnn"
                    },
                    "device": "cpu",
                    "cache_enabled": True
                }
            },
            "cache": {
                "enabled": True,
                "ttl": 3600,
                "max_size": 1000,
                "storage_path": "./cache"
            },
            "rate_limiting": {
                "enabled": True,
                "requests_per_minute": 60,
                "requests_per_hour": 1000
            },
            "monitoring": {
                "enabled": True,
                "log_level": "INFO",
                "metrics_enabled": True,
                "alert_threshold": 0.8
            },
            "security": {
                "encrypt_keys": True,
                "key_rotation_days": 90,
                "audit_logging": True
            }
        }
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    setup_openai(config)
    setup_anthropic(config)
    setup_google(config)
    setup_local_models(config)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    setup_cache(config)
    setup_monitoring(config)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    save_config(config)
    print("\nüíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ ai_config.json")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if test_configuration(config):
        print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        print("\nüìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
        for provider, settings in config['ai_providers'].items():
            status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if settings.get('enabled', False) else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
            print(f"  {provider}: {status}")
        
        print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò —Å–µ—Ä–≤–∏—Å—ã!")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 ai_manager.py advanced-generate 1")
    else:
        print("\n‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

if __name__ == '__main__':
    main()